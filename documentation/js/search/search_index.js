var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/FadeOptions.html",[0,0.112,1,0.606]],["body/interfaces/FadeOptions.html",[0,0.168,1,0.71,2,0.465,3,1.263,4,1.046,5,0.465,6,0.307,7,0.465,8,1.388,9,1.388,10,1.388,11,0.86,12,0.381,13,1.032,14,1.524,15,1.333,16,1.333,17,1.468,18,1.264,19,1.565,20,0.997,21,1.333,22,0.86,23,1.733,24,1.217,25,1.075,26,1.105,27,0.584,28,0.074,29,1.187,30,1.692,31,1.263,32,1.733,33,1.075,34,1.217,35,1.187,36,1.652,37,0.561,38,1.105,39,0.71,40,1.582,41,1.345,42,0.561,43,0.561,44,0.561,45,1.582,46,0.561,47,1.046,48,1.524,49,1.432,50,1.018,51,1.388,52,1.432,53,1.264,54,1.582,55,1.046,56,1.048,57,1.721,58,0.86,59,1.264,60,1.388,61,1.046,62,1.333,63,1.046,64,1.468,65,0.86,66,1.172,67,1.468,68,1.048,69,0.86,70,0.86,71,0.796,72,0.561,73,0.86,74,0.86,75,1.264,76,1.046,77,1.524,78,0.86,79,0.561,80,1.582,81,1.643,82,0.561,83,1.046,84,0.561,85,1.388,86,0.86,87,1.172,88,0.713,89,0.713,90,0.561,91,0.86,92,0.86,93,0.86,94,1.498,95,0.561,96,0.561,97,0.86,98,1.046,99,0.86,100,0.858,101,0.561,102,0.86,103,0.973,104,0.86,105,0.86,106,1.105,107,1.333,108,0.86,109,0.86,110,0.561,111,0.86,112,1.046,113,0.86,114,0.561,115,0.561,116,0.561,117,0.561,118,0.86,119,1.264,120,0.86,121,0.86,122,0.561,123,0.561,124,1.046,125,0.86,126,0.86,127,0.561,128,0.86,129,0.86,130,0.86,131,0.86,132,0.86,133,0.86,134,0.86,135,0.86,136,0.561,137,0.86,138,1.046,139,0.906,140,0.561,141,0.561,142,0.713,143,1.046,144,0.858,145,0.86,146,1.264,147,1.046,148,1.046,149,1.046,150,0.561,151,0.86,152,1.264,153,1.172,154,0.713,155,0.713,156,0.943,157,1.217,158,1.187,159,1.432,160,0.713,161,0.713,162,0.465,163,0.713,164,1.633,165,0.867,166,0.465,167,0.561,168,0.561,169,0.561,170,0.465,171,1.714,172,0.561,173,0.465,174,0.465,175,0.561,176,1.468,177,1.674,178,0.561,179,1.582,180,0.86,181,1.546,182,0.561,183,0.561,184,0.561,185,0.561,186,0.86,187,0.561,188,0.561,189,0.561,190,1.046,191,0.561,192,0.561,193,0.561,194,0.561,195,1.046,196,0.561,197,1.432,198,0.561,199,0.561,200,0.561,201,0.561,202,1.046,203,0.561,204,1.172,205,0.561,206,1.388,207,0.86,208,1.046,209,0.86,210,0.86,211,0.86,212,1.046,213,0.86,214,0.561,215,0.561,216,1.333,217,0.561,218,0.561,219,0.561,220,0.86,221,0.561,222,0.561,223,0.561,224,0.561,225,0.561,226,0.561,227,0.561,228,0.561,229,0.561,230,0.561,231,0.561,232,0.561,233,0.561,234,0.561,235,1.046,236,0.86,237,0.561,238,0.561,239,0.561,240,0.86,241,0.561,242,0.86,243,0.561,244,1.432,245,1.172,246,0.561,247,1.172,248,0.561,249,0.561,250,0.561,251,0.561,252,0.561,253,0.561,254,0.561,255,0.561,256,0.561,257,0.561,258,0.561,259,0.561,260,0.561,261,0.561,262,0.561,263,0.561,264,0.561,265,0.561,266,0.561,267,0.561,268,0.561,269,0.561,270,1.172,271,0.561,272,0.561,273,0.561,274,1.172,275,0.561,276,0.561,277,0.561,278,0.561,279,0.561,280,0.86,281,0.561,282,0.561,283,1.046,284,0.561,285,0.561,286,0.561,287,0.561,288,0.561,289,0.561,290,0.561,291,0.561,292,0.042,293,0.561,294,0.86,295,0.86,296,0.561,297,0.561,298,0.561,299,0.561,300,0.561,301,0.86,302,0.86,303,0.561,304,0.561,305,0.561,306,0.86,307,0.561,308,0.561,309,0.561,310,1.046,311,0.86,312,0.86,313,0.561,314,0.86,315,0.561,316,0.561,317,0.86,318,0.561,319,0.86,320,0.561,321,0.561,322,0.561,323,1.172,324,0.561,325,0.86,326,0.561,327,0.561,328,0.86,329,0.561,330,0.86,331,0.561,332,0.561,333,1.046,334,0.86,335,0.86,336,0.86,337,0.86,338,0.561,339,0.86,340,0.561,341,0.561,342,0.561,343,0.561,344,0.561,345,0.561,346,0.561,347,0.86,348,0.86,349,0.561,350,0.561,351,0.561,352,0.561,353,0.561,354,0.561,355,0.86,356,0.561,357,0.86,358,0.86,359,0.561,360,0.561,361,0.561,362,0.86,363,0.86,364,1.333,365,0.86,366,0.561,367,0.561,368,0.561,369,0.561,370,0.86,371,0.86,372,0.561,373,0.561,374,0.561,375,0.561,376,0.86,377,0.561,378,0.561,379,0.561,380,0.86,381,0.86,382,0.561,383,0.86,384,0.86,385,0.561,386,0.86,387,0.561,388,0.561,389,0.86,390,0.561,391,0.561,392,0.465,393,0.561,394,0.561,395,0.561,396,0.561,397,0.561,398,0.561,399,0.561,400,0.561,401,0.561,402,0.035,403,0.023]],["title/interfaces/ToastrClearOptions.html",[0,0.112,39,0.606]],["body/interfaces/ToastrClearOptions.html",[0,0.168,1,0.585,2,0.466,3,1.264,4,1.047,5,0.466,6,0.307,7,0.466,8,1.335,9,1.335,10,1.335,11,0.563,12,0.382,13,1.034,14,1.433,15,1.174,16,1.174,17,1.433,18,1.174,19,1.499,20,0.973,21,1.265,22,0.563,23,1.731,24,1.188,25,1.064,26,1.049,27,0.585,28,0.074,29,1.188,30,1.697,31,1.264,32,1.733,33,1.075,34,1.218,35,1.188,36,1.66,37,0.862,38,1.152,39,0.797,40,1.598,41,1.354,42,0.862,43,0.862,44,0.862,45,1.598,46,0.862,47,1.265,48,1.547,49,1.433,50,1.018,51,1.389,52,1.433,53,1.265,54,1.583,55,1.047,56,1.049,57,1.721,58,0.862,59,1.265,60,1.389,61,1.047,62,1.335,63,1.047,64,1.469,65,0.862,66,1.174,67,1.469,68,1.049,69,0.862,70,0.862,71,0.797,72,0.563,73,0.862,74,0.862,75,1.265,76,1.047,77,1.525,78,0.862,79,0.563,80,1.583,81,1.643,82,0.563,83,1.047,84,0.563,85,1.389,86,0.862,87,1.174,88,0.714,89,0.714,90,0.563,91,0.862,92,0.862,93,0.862,94,1.499,95,0.563,96,0.563,97,0.862,98,1.047,99,0.862,100,0.86,101,0.563,102,0.862,103,0.973,104,0.862,105,0.862,106,1.106,107,1.335,108,0.862,109,0.862,110,0.563,111,0.862,112,1.047,113,0.862,114,0.563,115,0.563,116,0.563,117,0.563,118,0.862,119,1.265,120,0.862,121,0.862,122,0.563,123,0.563,124,1.047,125,0.862,126,0.862,127,0.563,128,0.862,129,0.862,130,0.862,131,0.862,132,0.862,133,0.862,134,0.862,135,0.862,136,0.563,137,0.862,138,1.047,139,0.907,140,0.563,141,0.563,142,0.714,143,1.047,144,0.86,145,0.862,146,1.265,147,1.047,148,1.047,149,1.047,150,0.563,151,0.862,152,1.265,153,1.174,154,0.714,155,0.714,156,0.944,157,1.218,158,1.188,159,1.433,160,0.714,161,0.714,162,0.466,163,0.714,164,1.634,165,0.868,166,0.466,167,0.563,168,0.563,169,0.563,170,0.466,171,1.714,172,0.563,173,0.466,174,0.466,175,0.563,176,1.469,177,1.675,178,0.563,179,1.583,180,0.862,181,1.547,182,0.563,183,0.563,184,0.563,185,0.563,186,0.862,187,0.563,188,0.563,189,0.563,190,1.047,191,0.563,192,0.563,193,0.563,194,0.563,195,1.047,196,0.563,197,1.433,198,0.563,199,0.563,200,0.563,201,0.563,202,1.047,203,0.563,204,1.174,205,0.563,206,1.389,207,0.862,208,1.047,209,0.862,210,0.862,211,0.862,212,1.047,213,0.862,214,0.563,215,0.563,216,1.335,217,0.563,218,0.563,219,0.563,220,0.862,221,0.563,222,0.563,223,0.563,224,0.563,225,0.563,226,0.563,227,0.563,228,0.563,229,0.563,230,0.563,231,0.563,232,0.563,233,0.563,234,0.563,235,1.047,236,0.862,237,0.563,238,0.563,239,0.563,240,0.862,241,0.563,242,0.862,243,0.563,244,1.433,245,1.174,246,0.563,247,1.174,248,0.563,249,0.563,250,0.563,251,0.563,252,0.563,253,0.563,254,0.563,255,0.563,256,0.563,257,0.563,258,0.563,259,0.563,260,0.563,261,0.563,262,0.563,263,0.563,264,0.563,265,0.563,266,0.563,267,0.563,268,0.563,269,0.563,270,1.174,271,0.563,272,0.563,273,0.563,274,1.174,275,0.563,276,0.563,277,0.563,278,0.563,279,0.563,280,0.862,281,0.563,282,0.563,283,1.047,284,0.563,285,0.563,286,0.563,287,0.563,288,0.563,289,0.563,290,0.563,291,0.563,292,0.042,293,0.563,294,0.862,295,0.862,296,0.563,297,0.563,298,0.563,299,0.563,300,0.563,301,0.862,302,0.862,303,0.563,304,0.563,305,0.563,306,0.862,307,0.563,308,0.563,309,0.563,310,1.047,311,0.862,312,0.862,313,0.563,314,0.862,315,0.563,316,0.563,317,0.862,318,0.563,319,0.862,320,0.563,321,0.563,322,0.563,323,1.174,324,0.563,325,0.862,326,0.563,327,0.563,328,0.862,329,0.563,330,0.862,331,0.563,332,0.563,333,1.047,334,0.862,335,0.862,336,0.862,337,0.862,338,0.563,339,0.862,340,0.563,341,0.563,342,0.563,343,0.563,344,0.563,345,0.563,346,0.563,347,0.862,348,0.862,349,0.563,350,0.563,351,0.563,352,0.563,353,0.563,354,0.563,355,0.862,356,0.563,357,0.862,358,0.862,359,0.563,360,0.563,361,0.563,362,0.862,363,0.862,364,1.335,365,0.862,366,0.563,367,0.563,368,0.563,369,0.563,370,0.862,371,0.862,372,0.563,373,0.563,374,0.563,375,0.563,376,0.862,377,0.563,378,0.563,379,0.563,380,0.862,381,0.862,382,0.563,383,0.862,384,0.862,385,0.563,386,0.862,387,0.563,388,0.563,389,0.862,390,0.563,391,0.563,392,0.466,393,0.563,394,0.563,395,0.563,396,0.563,397,0.563,398,0.563,399,0.563,400,0.563,401,0.563,402,0.035,403,0.023]],["title/interfaces/ToastrEvent.html",[0,0.112,144,0.606]],["body/interfaces/ToastrEvent.html",[0,0.168,1,0.582,2,0.463,3,1.262,4,1.042,5,0.463,6,0.305,7,0.463,8,1.385,9,1.385,10,1.385,11,0.558,12,0.379,13,1.027,14,1.429,15,1.169,16,1.169,17,1.466,18,1.169,19,1.496,20,0.971,21,1.261,22,0.558,23,1.729,24,1.185,25,1.062,26,1.045,27,0.582,28,0.074,29,1.185,30,1.709,31,1.262,32,1.732,33,1.101,34,1.215,35,1.185,36,1.673,37,0.558,38,1.103,39,0.708,40,1.58,41,1.343,42,0.558,43,0.558,44,0.558,45,1.58,46,0.558,47,1.042,48,1.522,49,1.429,50,1.016,51,1.385,52,1.429,53,1.261,54,1.58,55,1.042,56,1.045,57,1.72,58,0.856,59,1.261,60,1.466,61,1.042,62,1.331,63,1.042,64,1.466,65,0.856,66,1.169,67,1.496,68,1.045,69,0.856,70,0.856,71,0.794,72,0.558,73,0.856,74,0.856,75,1.261,76,1.169,77,1.522,78,0.856,79,0.558,80,1.58,81,1.641,82,0.558,83,1.042,84,0.558,85,1.385,86,0.856,87,1.169,88,0.71,89,0.71,90,0.558,91,0.856,92,0.856,93,0.856,94,1.496,95,0.558,96,0.558,97,0.856,98,1.042,99,0.856,100,0.856,101,0.558,102,0.856,103,0.971,104,0.856,105,0.856,106,1.103,107,1.466,108,0.856,109,0.856,110,0.558,111,0.856,112,1.042,113,0.856,114,0.558,115,0.558,116,0.558,117,0.558,118,0.856,119,1.261,120,0.856,121,0.856,122,0.558,123,0.558,124,1.042,125,0.856,126,0.856,127,0.558,128,0.856,129,0.856,130,0.856,131,0.856,132,0.856,133,0.856,134,0.856,135,0.856,136,0.558,137,0.856,138,1.169,139,0.904,140,0.558,141,0.558,142,0.864,143,1.169,144,0.904,145,1.169,146,1.385,147,1.261,148,1.331,149,1.261,150,0.856,151,1.169,152,1.261,153,1.331,154,0.71,155,0.71,156,0.941,157,1.215,158,1.185,159,1.429,160,0.71,161,0.71,162,0.463,163,0.71,164,1.632,165,0.864,166,0.463,167,0.558,168,0.558,169,0.558,170,0.463,171,1.713,172,0.558,173,0.463,174,0.463,175,0.558,176,1.466,177,1.673,178,0.558,179,1.58,180,0.856,181,1.544,182,0.558,183,0.558,184,0.558,185,0.558,186,0.856,187,0.558,188,0.558,189,0.558,190,1.042,191,0.558,192,0.558,193,0.558,194,0.558,195,1.042,196,0.558,197,1.429,198,0.558,199,0.558,200,0.558,201,0.558,202,1.042,203,0.558,204,1.169,205,0.558,206,1.385,207,0.856,208,1.042,209,0.856,210,0.856,211,0.856,212,1.042,213,0.856,214,0.558,215,0.558,216,1.331,217,0.558,218,0.558,219,0.558,220,0.856,221,0.558,222,0.558,223,0.558,224,0.558,225,0.558,226,0.558,227,0.558,228,0.558,229,0.558,230,0.558,231,0.558,232,0.558,233,0.558,234,0.558,235,1.042,236,0.856,237,0.558,238,0.558,239,0.558,240,0.856,241,0.558,242,0.856,243,0.558,244,1.429,245,1.169,246,0.558,247,1.169,248,0.558,249,0.558,250,0.558,251,0.558,252,0.558,253,0.558,254,0.558,255,0.558,256,0.558,257,0.558,258,0.558,259,0.558,260,0.558,261,0.558,262,0.558,263,0.558,264,0.558,265,0.558,266,0.558,267,0.558,268,0.558,269,0.558,270,1.169,271,0.558,272,0.558,273,0.558,274,1.169,275,0.558,276,0.558,277,0.558,278,0.558,279,0.558,280,0.856,281,0.558,282,0.558,283,1.042,284,0.558,285,0.558,286,0.558,287,0.558,288,0.558,289,0.558,290,0.558,291,0.558,292,0.042,293,0.558,294,0.856,295,0.856,296,0.558,297,0.558,298,0.558,299,0.558,300,0.558,301,0.856,302,0.856,303,0.558,304,0.558,305,0.558,306,0.856,307,0.558,308,0.558,309,0.558,310,1.042,311,0.856,312,0.856,313,0.558,314,0.856,315,0.558,316,0.558,317,0.856,318,0.558,319,0.856,320,0.558,321,0.558,322,0.558,323,1.169,324,0.558,325,0.856,326,0.558,327,0.558,328,0.856,329,0.558,330,0.856,331,0.558,332,0.558,333,1.042,334,0.856,335,0.856,336,0.856,337,0.856,338,0.558,339,0.856,340,0.558,341,0.558,342,0.558,343,0.558,344,0.558,345,0.558,346,0.558,347,0.856,348,0.856,349,0.558,350,0.558,351,0.558,352,0.558,353,0.558,354,0.558,355,0.856,356,0.558,357,0.856,358,0.856,359,0.558,360,0.558,361,0.558,362,0.856,363,0.856,364,1.331,365,0.856,366,0.558,367,0.558,368,0.558,369,0.558,370,0.856,371,0.856,372,0.558,373,0.558,374,0.558,375,0.558,376,0.856,377,0.558,378,0.558,379,0.558,380,0.856,381,0.856,382,0.558,383,0.856,384,0.856,385,0.558,386,0.856,387,0.558,388,0.558,389,0.856,390,0.558,391,0.558,392,0.463,393,0.558,394,0.558,395,0.558,396,0.558,397,0.558,398,0.558,399,0.558,400,0.558,401,0.558,402,0.035,403,0.023]],["title/interfaces/ToastrIconClasses.html",[0,0.112,27,0.606]],["body/interfaces/ToastrIconClasses.html",[0,0.167,1,0.58,2,0.461,3,1.322,4,1.04,5,0.461,6,0.304,7,0.461,8,1.329,9,1.329,10,1.329,11,0.556,12,0.378,13,1.025,14,1.428,15,1.167,16,1.167,17,1.428,18,1.167,19,1.495,20,0.97,21,1.259,22,0.556,23,1.739,24,1.295,25,1.1,26,1.214,27,0.706,28,0.074,29,1.279,30,1.712,31,1.333,32,1.734,33,1.108,34,1.295,35,1.279,36,1.649,37,0.556,38,1.101,39,0.706,40,1.579,41,1.343,42,0.556,43,0.556,44,0.556,45,1.579,46,0.556,47,1.04,48,1.521,49,1.428,50,1.015,51,1.384,52,1.428,53,1.259,54,1.579,55,1.04,56,1.043,57,1.72,58,0.854,59,1.259,60,1.384,61,1.04,62,1.329,63,1.04,64,1.464,65,0.854,66,1.167,67,1.495,68,1.043,69,0.854,70,0.854,71,0.792,72,0.556,73,0.854,74,0.854,75,1.259,76,1.04,77,1.521,78,0.854,79,0.556,80,1.579,81,1.641,82,0.556,83,1.04,84,0.556,85,1.384,86,0.854,87,1.167,88,0.708,89,0.708,90,0.556,91,0.854,92,0.854,93,0.854,94,1.495,95,0.854,96,0.854,97,0.854,98,1.04,99,0.854,100,0.855,101,0.556,102,0.854,103,0.97,104,0.854,105,0.854,106,1.101,107,1.329,108,0.854,109,0.854,110,0.556,111,0.854,112,1.04,113,0.854,114,0.556,115,0.556,116,0.556,117,0.556,118,0.854,119,1.259,120,0.854,121,0.854,122,0.556,123,0.556,124,1.04,125,0.854,126,0.854,127,0.556,128,0.854,129,0.854,130,0.854,131,0.854,132,0.854,133,0.854,134,0.854,135,0.854,136,0.556,137,0.854,138,1.04,139,0.902,140,0.556,141,0.556,142,0.708,143,1.04,144,0.855,145,0.854,146,1.259,147,1.04,148,1.04,149,1.04,150,0.556,151,0.854,152,1.259,153,1.167,154,0.708,155,0.708,156,0.94,157,1.214,158,1.184,159,1.428,160,0.708,161,0.708,162,0.461,163,0.708,164,1.631,165,0.862,166,0.461,167,0.556,168,0.556,169,0.556,170,0.461,171,1.712,172,0.556,173,0.461,174,0.461,175,0.556,176,1.464,177,1.672,178,0.556,179,1.579,180,0.854,181,1.543,182,0.556,183,0.556,184,0.556,185,0.556,186,0.854,187,0.556,188,0.556,189,0.556,190,1.04,191,0.556,192,0.556,193,0.556,194,0.556,195,1.04,196,0.556,197,1.428,198,0.556,199,0.556,200,0.556,201,0.556,202,1.04,203,0.556,204,1.167,205,0.556,206,1.384,207,0.854,208,1.04,209,0.854,210,0.854,211,0.854,212,1.04,213,0.854,214,0.556,215,0.556,216,1.329,217,0.556,218,0.556,219,0.556,220,0.854,221,0.556,222,0.556,223,0.556,224,0.556,225,0.556,226,0.556,227,0.556,228,0.556,229,0.556,230,0.556,231,0.556,232,0.556,233,0.556,234,0.556,235,1.04,236,0.854,237,0.556,238,0.556,239,0.556,240,0.854,241,0.556,242,0.854,243,0.556,244,1.428,245,1.167,246,0.556,247,1.167,248,0.556,249,0.556,250,0.556,251,0.556,252,0.556,253,0.556,254,0.556,255,0.556,256,0.556,257,0.556,258,0.556,259,0.556,260,0.556,261,0.556,262,0.556,263,0.556,264,0.556,265,0.556,266,0.556,267,0.556,268,0.556,269,0.556,270,1.167,271,0.556,272,0.556,273,0.556,274,1.167,275,0.556,276,0.556,277,0.556,278,0.556,279,0.556,280,0.854,281,0.556,282,0.556,283,1.04,284,0.556,285,0.556,286,0.556,287,0.556,288,0.556,289,0.556,290,0.556,291,0.556,292,0.042,293,0.556,294,0.854,295,0.854,296,0.556,297,0.556,298,0.556,299,0.556,300,0.556,301,0.854,302,0.854,303,0.556,304,0.556,305,0.556,306,0.854,307,0.556,308,0.556,309,0.556,310,1.04,311,0.854,312,0.854,313,0.556,314,0.854,315,0.556,316,0.556,317,0.854,318,0.556,319,0.854,320,0.556,321,0.556,322,0.556,323,1.167,324,0.556,325,0.854,326,0.556,327,0.556,328,0.854,329,0.556,330,0.854,331,0.556,332,0.556,333,1.04,334,0.854,335,0.854,336,0.854,337,0.854,338,0.556,339,0.854,340,0.556,341,0.556,342,0.556,343,0.556,344,0.556,345,0.556,346,0.556,347,0.854,348,0.854,349,0.556,350,0.556,351,0.556,352,0.556,353,0.556,354,0.556,355,0.854,356,0.556,357,0.854,358,0.854,359,0.556,360,0.556,361,0.556,362,0.854,363,0.854,364,1.329,365,0.854,366,0.556,367,0.556,368,0.556,369,0.556,370,0.854,371,0.854,372,0.556,373,0.556,374,0.556,375,0.556,376,0.854,377,0.556,378,0.556,379,0.556,380,0.854,381,0.854,382,0.556,383,0.854,384,0.854,385,0.556,386,0.854,387,0.556,388,0.556,389,0.854,390,0.556,391,0.556,392,0.461,393,0.556,394,0.556,395,0.556,396,0.556,397,0.556,398,0.556,399,0.556,400,0.556,401,0.556,402,0.035,403,0.023,404,1.532]],["title/interfaces/ToastrOptions.html",[0,0.112,139,0.606]],["body/interfaces/ToastrOptions.html",[0,0.168,1,0.587,2,0.468,3,1.265,4,1.049,5,0.468,6,0.308,7,0.468,8,1.337,9,1.337,10,1.337,11,0.565,14,1.435,15,1.176,16,1.176,17,1.435,18,1.176,19,1.501,20,0.974,21,1.267,22,0.565,23,1.731,24,1.189,25,1.065,26,1.05,27,0.587,28,0.074,29,1.189,30,1.693,31,1.265,32,1.734,33,1.076,34,1.219,35,1.189,36,1.661,37,0.565,38,1.153,39,0.713,40,1.599,41,1.346,42,0.565,43,0.565,44,0.565,45,1.584,46,0.565,47,1.049,48,1.526,49,1.435,50,1.019,51,1.391,52,1.435,53,1.267,54,1.584,55,1.049,56,1.05,57,1.722,58,0.864,59,1.267,60,1.391,61,1.049,62,1.337,63,1.049,64,1.471,65,0.864,66,1.176,67,1.501,68,1.05,69,0.864,70,0.864,71,0.799,72,0.565,73,0.864,74,0.864,75,1.267,76,1.049,77,1.526,78,0.864,79,0.565,80,1.584,81,1.644,82,0.565,83,1.049,84,0.565,85,1.391,86,0.864,87,1.176,88,0.716,89,0.716,90,0.565,91,0.864,92,0.864,93,0.864,94,1.501,95,0.565,96,0.565,97,0.864,98,1.049,99,0.864,100,0.861,101,0.565,102,0.864,103,0.974,104,0.864,105,0.864,106,1.108,107,1.337,108,0.864,109,0.864,110,0.565,111,0.864,112,1.049,113,0.864,114,0.565,115,0.565,116,0.565,117,0.565,118,0.864,119,1.267,120,0.864,121,0.864,122,0.565,123,0.565,124,1.049,125,0.864,126,0.864,127,0.565,128,0.864,129,0.864,130,0.864,131,0.864,132,0.864,133,0.864,134,0.864,135,0.864,136,0.565,137,0.864,138,1.176,139,0.945,140,0.864,141,0.864,142,0.716,143,1.049,144,0.861,145,0.864,146,1.267,147,1.049,148,1.049,149,1.049,150,0.565,151,0.864,152,1.267,153,1.176,154,0.716,155,0.716,156,0.945,157,1.219,158,1.189,159,1.435,160,0.716,161,0.716,162,0.468,163,0.716,164,1.635,165,0.87,166,0.468,167,0.565,168,0.565,169,0.565,170,0.468,171,1.715,172,0.565,173,0.468,174,0.468,175,0.565,176,1.471,177,1.675,178,0.565,179,1.584,180,0.864,181,1.548,182,0.565,183,0.565,184,0.565,185,0.565,186,0.864,187,0.565,188,0.565,189,0.565,190,1.049,191,0.565,192,0.565,193,0.565,194,0.565,195,1.049,196,0.565,197,1.435,198,0.565,199,0.565,200,0.565,201,0.565,202,1.049,203,0.565,204,1.176,205,0.565,206,1.391,207,0.864,208,1.049,209,0.864,210,0.864,211,0.864,212,1.049,213,0.864,214,0.565,215,0.565,216,1.337,217,0.565,218,0.565,219,0.565,220,0.864,221,0.565,222,0.565,223,0.565,224,0.565,225,0.565,226,0.565,227,0.565,228,0.565,229,0.565,230,0.565,231,0.565,232,0.565,233,0.565,234,0.565,235,1.049,236,0.864,237,0.565,238,0.565,239,0.565,240,0.864,241,0.565,242,0.864,243,0.565,244,1.435,245,1.176,246,0.565,247,1.176,248,0.565,249,0.565,250,0.565,251,0.565,252,0.565,253,0.565,254,0.565,255,0.565,256,0.565,257,0.565,258,0.565,259,0.565,260,0.565,261,0.565,262,0.565,263,0.565,264,0.565,265,0.565,266,0.565,267,0.565,268,0.565,269,0.565,270,1.176,271,0.565,272,0.565,273,0.565,274,1.176,275,0.565,276,0.565,277,0.565,278,0.565,279,0.565,280,0.864,281,0.565,282,0.565,283,1.049,284,0.565,285,0.565,286,0.565,287,0.565,288,0.565,289,0.565,290,0.565,291,0.565,292,0.043,293,0.565,294,0.864,295,0.864,296,0.565,297,0.565,298,0.565,299,0.565,300,0.565,301,0.864,302,0.864,303,0.565,304,0.565,305,0.565,306,0.864,307,0.565,308,0.565,309,0.565,310,1.049,311,0.864,312,0.864,313,0.565,314,0.864,315,0.565,316,0.565,317,0.864,318,0.565,319,0.864,320,0.565,321,0.565,322,0.565,323,1.176,324,0.565,325,0.864,326,0.565,327,0.565,328,0.864,329,0.565,330,0.864,331,0.565,332,0.565,333,1.049,334,0.864,335,0.864,336,0.864,337,0.864,338,0.565,339,0.864,340,0.565,341,0.565,342,0.565,343,0.565,344,0.565,345,0.565,346,0.565,347,0.864,348,0.864,349,0.565,350,0.565,351,0.565,352,0.565,353,0.565,354,0.565,355,0.864,356,0.565,357,0.864,358,0.864,359,0.565,360,0.565,361,0.565,362,0.864,363,0.864,364,1.337,365,0.864,366,0.565,367,0.565,368,0.565,369,0.565,370,0.864,371,0.864,372,0.565,373,0.565,374,0.565,375,0.565,376,0.864,377,0.565,378,0.565,379,0.565,380,0.864,381,0.864,382,0.565,383,0.864,384,0.864,385,0.565,386,0.864,387,0.565,388,0.565,389,0.864,390,0.565,391,0.565,392,0.468,393,0.565,394,0.565,395,0.565,396,0.565,397,0.565,398,0.565,399,0.565,400,0.565,401,0.565,402,0.035,403,0.023]],["title/interfaces/ToastrSettings.html",[0,0.112,50,0.606]],["body/interfaces/ToastrSettings.html",[0,0.163,1,0.55,2,0.43,3,1.258,4,0.996,5,0.43,6,0.284,7,0.43,8,1.349,9,1.292,10,1.434,11,0.519,12,0.353,13,0.971,14,1.396,15,1.125,16,1.125,17,1.539,18,1.349,19,1.573,20,1.031,21,1.434,22,0.519,23,1.747,24,1.238,25,1.109,26,1.011,27,0.676,28,0.074,29,1.157,30,1.721,31,1.258,32,1.727,33,1.068,34,1.189,35,1.157,36,1.632,37,0.519,38,1.189,39,0.676,40,1.632,41,1.373,42,0.519,43,0.519,44,0.519,45,1.622,46,0.519,47,0.996,48,1.622,49,1.396,50,1.015,51,1.539,52,1.557,53,1.467,54,1.632,55,1.219,56,1.157,57,1.739,58,1.125,59,1.467,60,1.518,61,1.292,62,1.518,63,1.292,64,1.467,65,1.125,66,1.292,67,1.557,68,1.071,69,0.81,70,1.125,71,0.916,72,0.81,73,1.125,74,1.125,75,1.292,76,1.125,77,1.557,78,1.125,79,0.81,80,1.612,81,1.663,82,0.81,83,1.219,84,0.81,85,1.434,86,1.125,87,1.292,88,0.932,89,0.932,90,0.81,91,0.996,92,1.125,93,1.125,94,1.518,95,0.81,96,0.81,97,1.125,98,1.292,99,1.125,100,0.877,101,0.81,102,1.125,103,1.031,104,1.125,105,1.125,106,1.071,107,1.349,108,1.125,109,1.125,110,0.81,111,0.996,112,1.219,113,1.125,114,0.81,115,0.81,116,0.81,117,0.81,118,1.125,119,1.434,120,0.996,121,1.125,122,0.81,123,0.81,124,1.219,125,0.996,126,1.125,127,0.81,128,0.996,129,1.125,130,0.996,131,1.125,132,0.996,133,1.125,134,1.125,135,1.125,136,0.81,137,1.125,138,0.996,139,0.877,140,0.519,141,0.519,142,0.671,143,0.996,144,0.828,145,0.81,146,1.219,147,0.996,148,0.996,149,0.996,150,0.519,151,0.81,152,1.219,153,1.125,154,0.671,155,0.671,156,0.916,157,1.189,158,1.157,159,1.396,160,0.671,161,0.671,162,0.43,163,0.671,164,1.612,165,0.825,166,0.43,167,0.519,168,0.519,169,0.519,170,0.43,171,1.7,172,0.519,173,0.43,174,0.43,175,0.519,176,1.434,177,1.657,178,0.519,179,1.557,180,0.81,181,1.518,182,0.519,183,0.519,184,0.519,185,0.519,186,0.81,187,0.519,188,0.519,189,0.519,190,0.996,191,0.519,192,0.519,193,0.519,194,0.519,195,0.996,196,0.519,197,1.396,198,0.519,199,0.519,200,0.519,201,0.519,202,0.996,203,0.519,204,1.125,205,0.519,206,1.349,207,0.81,208,0.996,209,0.81,210,0.81,211,0.81,212,0.996,213,0.81,214,0.519,215,0.519,216,1.292,217,0.519,218,0.519,219,0.519,220,0.81,221,0.519,222,0.519,223,0.519,224,0.519,225,0.519,226,0.519,227,0.519,228,0.519,229,0.519,230,0.519,231,0.519,232,0.519,233,0.519,234,0.519,235,0.996,236,0.81,237,0.519,238,0.519,239,0.519,240,0.81,241,0.519,242,0.81,243,0.519,244,1.396,245,1.125,246,0.519,247,1.125,248,0.519,249,0.519,250,0.519,251,0.519,252,0.519,253,0.519,254,0.519,255,0.519,256,0.519,257,0.519,258,0.519,259,0.519,260,0.519,261,0.519,262,0.519,263,0.519,264,0.519,265,0.519,266,0.519,267,0.519,268,0.519,269,0.519,270,1.125,271,0.519,272,0.519,273,0.519,274,1.125,275,0.519,276,0.519,277,0.519,278,0.519,279,0.519,280,0.81,281,0.519,282,0.519,283,0.996,284,0.519,285,0.519,286,0.519,287,0.519,288,0.519,289,0.519,290,0.519,291,0.519,292,0.04,293,0.519,294,0.81,295,0.81,296,0.519,297,0.519,298,0.519,299,0.519,300,0.519,301,0.81,302,0.81,303,0.519,304,0.519,305,0.519,306,0.81,307,0.519,308,0.519,309,0.519,310,0.996,311,0.81,312,0.81,313,0.519,314,0.81,315,0.519,316,0.519,317,0.81,318,0.519,319,0.81,320,0.519,321,0.519,322,0.519,323,1.125,324,0.519,325,0.81,326,0.519,327,0.519,328,0.81,329,0.519,330,0.81,331,0.519,332,0.519,333,0.996,334,0.81,335,0.81,336,0.81,337,0.81,338,0.519,339,0.81,340,0.519,341,0.519,342,0.519,343,0.519,344,0.519,345,0.519,346,0.519,347,0.81,348,0.81,349,0.519,350,0.519,351,0.519,352,0.519,353,0.519,354,0.519,355,0.81,356,0.519,357,0.81,358,0.81,359,0.519,360,0.519,361,0.519,362,0.81,363,0.81,364,1.292,365,0.81,366,0.519,367,0.519,368,0.519,369,0.519,370,0.81,371,0.81,372,0.519,373,0.519,374,0.519,375,0.519,376,0.81,377,0.519,378,0.519,379,0.519,380,0.81,381,0.81,382,0.519,383,0.81,384,0.81,385,0.519,386,0.81,387,0.519,388,0.519,389,0.81,390,0.519,391,0.519,392,0.43,393,0.519,394,0.519,395,0.519,396,0.519,397,0.519,398,0.519,399,0.519,400,0.519,401,0.519,402,0.033,403,0.021]],["title/coverage.html",[405,2.573]],["body/coverage.html",[0,0.218,1,0.908,5,1.108,6,0.968,20,1.11,25,0.908,27,0.908,28,0.072,31,1.108,33,0.908,39,0.908,50,0.908,100,0.908,103,0.908,139,0.908,144,0.908,292,0.054,392,1.47,402,0.063,403,0.054,405,2.865,406,2.865,407,3.682,408,3.682,409,3.682,410,3.682,411,3.682,412,3.682,413,3.682,414,4.631,415,3.682,416,2.865,417,2.865,418,3.682,419,3.682]],["title/dependencies.html",[420,1.612,421,1.858]],["body/dependencies.html",[28,0.068,89,1.164,292,0.057,402,0.065,403,0.057,421,2.444,422,3.867]],["title/miscellaneous/enumerations.html",[423,1.083,424,2.288]],["body/miscellaneous/enumerations.html",[3,1.309,6,0.756,12,0.94,28,0.071,29,1.309,34,1.309,35,1.309,156,1.155,173,1.309,292,0.056,402,0.064,403,0.056,423,1.993,424,2.965,425,2.965]],["title/miscellaneous/functions.html",[423,1.083,426,2.288]],["body/miscellaneous/functions.html",[6,0.737,7,1.291,12,0.917,20,1.146,28,0.07,41,1.119,71,0.917,88,1.291,103,1.115,142,1.119,154,1.398,155,1.291,156,1.146,157,1.291,158,1.291,160,1.291,161,1.291,162,1.119,163,1.119,165,1.119,166,1.119,170,1.119,292,0.055,402,0.063,403,0.055,416,3.337,417,3.337,423,1.944,425,3.517,426,2.893,427,4.288,428,4.288]],["title/index.html",[12,0.511,429,1.612,430,1.612]],["body/index.html",[24,1.051,28,0.065,33,1.123,38,1.051,56,1.326,68,1.051,100,0.861,174,1.245,292,0.051,402,0.061,403,0.051,420,2.717,421,2.207,431,4.134,432,3.492,433,3.492,434,3.492,435,4.134,436,4.134,437,3.492,438,3.492,439,3.492,440,3.492,441,3.492,442,3.492,443,3.492,444,4.647,445,3.492,446,3.492,447,3.492,448,3.492,449,3.492,450,4.404,451,3.492,452,3.492,453,3.492,454,3.492,455,4.404,456,3.492,457,3.492,458,3.492,459,3.492,460,4.134,461,3.492,462,4.553,463,3.492,464,3.492,465,3.492,466,3.492,467,4.404,468,3.492,469,3.492,470,4.134,471,3.492,472,4.553,473,3.492,474,4.134,475,3.492,476,4.134,477,4.134,478,3.492,479,3.492,480,3.492,481,4.553,482,3.492,483,3.492,484,3.492,485,4.134,486,3.492,487,3.492,488,3.492,489,3.492,490,3.492,491,3.492,492,3.492,493,3.492,494,3.492,495,4.134,496,3.492,497,4.134,498,3.492,499,3.492,500,2.717,501,3.492,502,3.492,503,3.492,504,3.492,505,3.492,506,3.492,507,3.492,508,3.492,509,2.717,510,2.717,511,3.492,512,3.492,513,3.492,514,3.492,515,3.492,516,3.492,517,3.492,518,3.217,519,2.717,520,3.492,521,2.613,522,3.492,523,2.717,524,3.492,525,3.492]],["title/license.html",[429,1.612,430,1.612,521,1.309]],["body/license.html",[26,1.271,28,0.062,71,0.893,106,1.09,292,0.053,402,0.062,403,0.053,406,2.818,500,2.818,509,2.818,510,2.818,518,3.479,519,2.818,521,2.288,523,2.818,526,3.621,527,4.223,528,3.621,529,3.621,530,3.621,531,3.621,532,3.621,533,3.621,534,4.223,535,4.851,536,3.621,537,3.621,538,3.621,539,4.471,540,3.621,541,4.223,542,3.621,543,3.621,544,3.621,545,3.621,546,3.621,547,3.621,548,3.621,549,3.621,550,3.621,551,4.223,552,3.621,553,3.621,554,3.621,555,3.621,556,3.621,557,3.621,558,4.223,559,4.223,560,3.621,561,3.621,562,3.621,563,3.621,564,3.621,565,3.621,566,3.621,567,3.621,568,3.621,569,3.621,570,3.621,571,3.621,572,3.621,573,3.621,574,3.621,575,3.621,576,3.621,577,3.621,578,3.621,579,3.621,580,3.621,581,3.621,582,3.621,583,3.621,584,3.621,585,3.621,586,3.621,587,3.621]],["title/modules.html",[588,2.573]],["body/modules.html",[28,0.065,292,0.057,402,0.065,403,0.057,588,3.016]],["title/overview.html",[589,2.573]],["body/overview.html",[2,1.163,25,0.953,28,0.065,292,0.057,402,0.065,403,0.057,589,3.006,590,3.864,591,3.864]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":64,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["1",{"_index":590,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":392,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["1000",{"_index":85,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["2/2",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["2020",{"_index":519,"title":{},"body":{"index.html":{},"license.html":{}}}],["2021",{"_index":520,"title":{},"body":{"index.html":{}}}],["24/24",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":125,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["31/31",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["39;').replace(//g",{"_index":345,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["4.1.0",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":132,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["6",{"_index":591,"title":{},"body":{"overview.html":{}}}],["7/7",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["_map",{"_index":291,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["_map.message",{"_index":294,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["_settings",{"_index":290,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["_settings.preventduplicates",{"_index":293,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["above",{"_index":557,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":507,"title":{},"body":{"index.html":{}}}],["action",{"_index":580,"title":{},"body":{"license.html":{}}}],["add",{"_index":56,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"index.html":{}}}],["added",{"_index":98,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["additional",{"_index":488,"title":{},"body":{"index.html":{}}}],["against",{"_index":495,"title":{},"body":{"index.html":{}}}],["always",{"_index":42,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["amount",{"_index":59,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["amp;').replace(/'/g",{"_index":343,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["analytics",{"_index":468,"title":{},"body":{"index.html":{}}}],["analyze",{"_index":469,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":549,"title":{},"body":{"license.html":{}}}],["animate",{"_index":270,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["animate(toastelement",{"_index":271,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["animate.css",{"_index":89,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"dependencies.html":{}}}],["animate__${options.style",{"_index":273,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["animation",{"_index":19,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["animationend",{"_index":281,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["animations",{"_index":11,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["approval",{"_index":501,"title":{},"body":{"index.html":{}}}],["argument",{"_index":142,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["ariavalue",{"_index":348,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["arising",{"_index":584,"title":{},"body":{"license.html":{}}}],["array.from(toastr.containerel.children).foreach(el",{"_index":193,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["assertive",{"_index":351,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["associated",{"_index":536,"title":{},"body":{"license.html":{}}}],["audience",{"_index":480,"title":{},"body":{"index.html":{}}}],["authors",{"_index":509,"title":{},"body":{"index.html":{},"license.html":{}}}],["being",{"_index":115,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["beneficial",{"_index":478,"title":{},"body":{"index.html":{}}}],["blocking",{"_index":434,"title":{},"body":{"index.html":{}}}],["body",{"_index":130,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["boolean",{"_index":48,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["bottom",{"_index":101,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["bower",{"_index":448,"title":{},"body":{"index.html":{}}}],["branch",{"_index":497,"title":{},"body":{"index.html":{}}}],["bug",{"_index":476,"title":{},"body":{"index.html":{}}}],["build",{"_index":455,"title":{},"body":{"index.html":{}}}],["button",{"_index":52,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["c",{"_index":526,"title":{},"body":{"license.html":{}}}],["callback",{"_index":240,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["called",{"_index":21,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["characters",{"_index":79,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["charge",{"_index":531,"title":{},"body":{"license.html":{}}}],["check",{"_index":160,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["ci",{"_index":486,"title":{},"body":{"index.html":{}}}],["claim",{"_index":577,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":404,"title":{},"body":{"interfaces/ToastrIconClasses.html":{}}}],["clear",{"_index":190,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["clear(toastelement",{"_index":234,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["clearcontainer(options",{"_index":191,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["clearing",{"_index":37,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["clearoptions",{"_index":204,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["clearoptions?.force",{"_index":205,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["clears",{"_index":230,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["cleartimeout(intervalid",{"_index":312,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["cleartoast(toastelement",{"_index":203,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["cli",{"_index":464,"title":{},"body":{"index.html":{}}}],["click",{"_index":136,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["clicks",{"_index":63,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["close",{"_index":51,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closebutton",{"_index":55,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closeclass",{"_index":58,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closed",{"_index":72,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closeduration",{"_index":65,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closeelement",{"_index":306,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closeelement.classlist.add(options.closeclass",{"_index":377,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closeelement.setattribute('role",{"_index":378,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closehtml",{"_index":70,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["closeonhover",{"_index":74,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["conditions",{"_index":556,"title":{},"body":{"license.html":{}}}],["connection",{"_index":586,"title":{},"body":{"license.html":{}}}],["considered",{"_index":474,"title":{},"body":{"index.html":{}}}],["console.warn(`couldn't",{"_index":223,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["const",{"_index":171,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["container",{"_index":77,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["containerel",{"_index":180,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["containerid",{"_index":78,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["contains",{"_index":213,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["contract",{"_index":581,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":471,"title":{},"body":{"index.html":{}}}],["copies",{"_index":551,"title":{},"body":{"license.html":{}}}],["copy",{"_index":534,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":518,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":441,"title":{},"body":{"index.html":{}}}],["couldn't",{"_index":232,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["coverage",{"_index":405,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":68,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"index.html":{}}}],["createcontainer(options",{"_index":215,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["created",{"_index":150,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["createelementfromhtml(htmlstring",{"_index":265,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["creates",{"_index":212,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["credits",{"_index":512,"title":{},"body":{"index.html":{}}}],["css",{"_index":24,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"index.html":{}}}],["customized",{"_index":442,"title":{},"body":{"index.html":{}}}],["damages",{"_index":578,"title":{},"body":{"license.html":{}}}],["date",{"_index":146,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["deal",{"_index":538,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":587,"title":{},"body":{"license.html":{}}}],["default",{"_index":32,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["delayedhidetoast",{"_index":330,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["delete",{"_index":43,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["denial",{"_index":508,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":421,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["develop",{"_index":496,"title":{},"body":{"index.html":{}}}],["discretion",{"_index":505,"title":{},"body":{"index.html":{}}}],["display",{"_index":318,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["displayed",{"_index":84,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["displaytoast",{"_index":319,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["distribute",{"_index":547,"title":{},"body":{"license.html":{}}}],["div",{"_index":266,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["div.firstchild",{"_index":269,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["div.innerhtml",{"_index":267,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["document.createelement('div",{"_index":216,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["document.getelementbyid(settings.containerid",{"_index":261,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["document.queryselector(options.target",{"_index":221,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["documentation",{"_index":406,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dom",{"_index":75,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["duration",{"_index":14,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["el?.parentnode?.removechild(el",{"_index":228,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["element",{"_index":45,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["element(s",{"_index":264,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["empty",{"_index":170,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["ends",{"_index":22,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["endtime",{"_index":145,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["enum",{"_index":172,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["enumerations",{"_index":424,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":29,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/enumerations.html":{}}}],["error(message",{"_index":256,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["escaped",{"_index":82,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["escapehtml",{"_index":83,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["escapehtml(map.message",{"_index":372,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["escapehtml(map.title",{"_index":366,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["ev",{"_index":275,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["even",{"_index":44,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["event",{"_index":106,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"license.html":{}}}],["event.cancelbubble",{"_index":337,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["event.stoppropagation",{"_index":336,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["eventargs",{"_index":186,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["events",{"_index":143,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["existing",{"_index":483,"title":{},"body":{"index.html":{}}}],["export",{"_index":175,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["express",{"_index":566,"title":{},"body":{"license.html":{}}}],["extended",{"_index":443,"title":{},"body":{"index.html":{}}}],["extendedtimeout",{"_index":86,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["extends",{"_index":140,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["fadein",{"_index":128,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["fadeoptions",{"_index":1,"title":{"interfaces/FadeOptions.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["fadeout",{"_index":91,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["false",{"_index":54,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["feature",{"_index":477,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["files",{"_index":537,"title":{},"body":{"license.html":{}}}],["fires",{"_index":285,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["fitness",{"_index":571,"title":{},"body":{"license.html":{}}}],["focus",{"_index":46,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["following",{"_index":555,"title":{},"body":{"license.html":{}}}],["force",{"_index":47,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["found",{"_index":224,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["free",{"_index":530,"title":{},"body":{"license.html":{}}}],["function",{"_index":20,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":426,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["functiontocheck",{"_index":165,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":554,"title":{},"body":{"license.html":{}}}],["g",{"_index":461,"title":{},"body":{"index.html":{}}}],["gallery",{"_index":446,"title":{},"body":{"index.html":{}}}],["getcontainer(options",{"_index":259,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["getdefaults",{"_index":189,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["getoptions",{"_index":399,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["getting",{"_index":429,"title":{"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":155,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["goal",{"_index":439,"title":{},"body":{"index.html":{}}}],["granted",{"_index":529,"title":{},"body":{"license.html":{}}}],["gt",{"_index":346,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["gulp",{"_index":462,"title":{},"body":{"index.html":{}}}],["handleevents",{"_index":325,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["helper",{"_index":226,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hereby",{"_index":528,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":107,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hide",{"_index":10,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hideduration",{"_index":87,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hidemethod",{"_index":92,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hidetoast",{"_index":309,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hidetoast(false",{"_index":334,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hidetoast(true",{"_index":340,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["hiding",{"_index":90,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["holders",{"_index":575,"title":{},"body":{"license.html":{}}}],["hovers",{"_index":73,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["html",{"_index":66,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["htmlelement",{"_index":181,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["htmlstring",{"_index":263,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["htmlstring.trim",{"_index":268,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["http://www.opensource.org/licenses/mit",{"_index":524,"title":{},"body":{"index.html":{}}}],["https://github.com/codeseven/toastr",{"_index":517,"title":{},"body":{"index.html":{}}}],["https://github.com/srirangan/notifer.js",{"_index":514,"title":{},"body":{"index.html":{}}}],["icon",{"_index":93,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["iconclass",{"_index":94,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["iconclasses",{"_index":97,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["icons",{"_index":354,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["id",{"_index":76,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["identified",{"_index":493,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["implied",{"_index":567,"title":{},"body":{"license.html":{}}}],["included",{"_index":560,"title":{},"body":{"license.html":{}}}],["including",{"_index":541,"title":{},"body":{"license.html":{}}}],["increment",{"_index":187,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indicate",{"_index":489,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/enumerations.html":{}}}],["info'].includes(map.iconclass",{"_index":349,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["info(message",{"_index":243,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["inspired",{"_index":513,"title":{},"body":{"index.html":{}}}],["install",{"_index":444,"title":{},"body":{"index.html":{}}}],["installat",{"_index":465,"title":{},"body":{"index.html":{}}}],["installed",{"_index":460,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"overview.html":{}}}],["intervalid",{"_index":302,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["isfunction",{"_index":416,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isfunction(functiontocheck",{"_index":166,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["isfunction(options.onclick",{"_index":341,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["isfunction(options.oncomplete",{"_index":276,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["isfunction(options.onhidden",{"_index":313,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["isnan(options.duration",{"_index":279,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["isnotnullorundefined",{"_index":417,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnotnullorundefined(map.optionsoverride",{"_index":297,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["isnotnullorundefined(toastr.containerel",{"_index":192,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["isnotnullorundefined(value",{"_index":162,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["it's",{"_index":161,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["javascript",{"_index":432,"title":{},"body":{"index.html":{}}}],["jquery",{"_index":436,"title":{},"body":{"index.html":{}}}],["karma",{"_index":463,"title":{},"body":{"index.html":{}}}],["key",{"_index":152,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["kind",{"_index":565,"title":{},"body":{"license.html":{}}}],["koenen",{"_index":511,"title":{},"body":{"index.html":{}}}],["languages",{"_index":123,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["large",{"_index":479,"title":{},"body":{"index.html":{}}}],["last",{"_index":182,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["left",{"_index":122,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["liability",{"_index":579,"title":{},"body":{"license.html":{}}}],["liable",{"_index":576,"title":{},"body":{"license.html":{}}}],["library",{"_index":174,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"index.html":{}}}],["license",{"_index":521,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["license.php",{"_index":525,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":542,"title":{},"body":{"license.html":{}}}],["limited",{"_index":568,"title":{},"body":{"license.html":{}}}],["line",{"_index":397,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["listen",{"_index":184,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["listener",{"_index":185,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["live",{"_index":353,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["longer",{"_index":437,"title":{},"body":{"index.html":{}}}],["made",{"_index":494,"title":{},"body":{"index.html":{}}}],["map",{"_index":153,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["map.iconclass",{"_index":295,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["map.message",{"_index":371,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["map.optionsoverride",{"_index":298,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["map.optionsoverride.iconclass",{"_index":299,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["map.title",{"_index":363,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["master",{"_index":499,"title":{},"body":{"index.html":{}}}],["matches",{"_index":116,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["matching",{"_index":402,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["merchantability",{"_index":570,"title":{},"body":{"license.html":{}}}],["merge",{"_index":545,"title":{},"body":{"license.html":{}}}],["message",{"_index":81,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["messageclass",{"_index":99,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["messageelement",{"_index":304,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["messageelement.classlist.add(options.messageclass",{"_index":374,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["messageelement.innerhtml",{"_index":373,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["miliseconds",{"_index":18,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["minified",{"_index":456,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":423,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":523,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":544,"title":{},"body":{"license.html":{}}}],["modules",{"_index":588,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":88,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":225,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["need",{"_index":458,"title":{},"body":{"index.html":{}}}],["new",{"_index":100,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"index.html":{}}}],["newestontop",{"_index":102,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["next",{"_index":396,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["node",{"_index":459,"title":{},"body":{"index.html":{}}}],["non",{"_index":433,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":574,"title":{},"body":{"license.html":{}}}],["noop",{"_index":103,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notice",{"_index":558,"title":{},"body":{"license.html":{}}}],["notification",{"_index":30,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["notifications",{"_index":38,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"index.html":{}}}],["notify(map",{"_index":288,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["npm",{"_index":450,"title":{},"body":{"index.html":{}}}],["nuget",{"_index":445,"title":{},"body":{"index.html":{}}}],["null",{"_index":157,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":17,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["object",{"_index":169,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["obtaining",{"_index":533,"title":{},"body":{"license.html":{}}}],["onanimationend",{"_index":274,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["onclick",{"_index":104,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["oncloseclick",{"_index":105,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["oncomplete",{"_index":15,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["onhidden",{"_index":108,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["onshown",{"_index":109,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["operation",{"_index":491,"title":{},"body":{"index.html":{}}}],["optional",{"_index":428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["options",{"_index":36,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.closebutton",{"_index":335,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.closeduration",{"_index":311,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.closeonhover",{"_index":326,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.containerid",{"_index":218,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.duration",{"_index":280,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.escapehtml",{"_index":365,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.extendedtimeout",{"_index":389,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.hideduration",{"_index":209,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.hidemethod",{"_index":210,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.iconclass",{"_index":296,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.newestontop",{"_index":360,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.onclick",{"_index":331,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.oncloseclick",{"_index":338,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.oncloseclick(event",{"_index":339,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.oncomplete",{"_index":277,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.onhidden",{"_index":315,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.onshown",{"_index":321,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.progressbar",{"_index":382,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.rtl",{"_index":387,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.showduration",{"_index":320,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.showmethod",{"_index":322,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.taptodismiss",{"_index":332,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["options.timeout",{"_index":323,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["optionsoverride",{"_index":244,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["otherwise",{"_index":583,"title":{},"body":{"license.html":{}}}],["out",{"_index":585,"title":{},"body":{"license.html":{}}}],["over",{"_index":506,"title":{},"body":{"index.html":{}}}],["override",{"_index":310,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["overriden",{"_index":138,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["overview",{"_index":589,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owners",{"_index":503,"title":{},"body":{"index.html":{}}}],["package",{"_index":420,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":159,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["parameters",{"_index":427,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partial",{"_index":141,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["particular",{"_index":572,"title":{},"body":{"license.html":{}}}],["pass",{"_index":482,"title":{},"body":{"index.html":{}}}],["per",{"_index":96,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["permission",{"_index":527,"title":{},"body":{"license.html":{}}}],["permit",{"_index":552,"title":{},"body":{"license.html":{}}}],["person",{"_index":532,"title":{},"body":{"license.html":{}}}],["persons",{"_index":553,"title":{},"body":{"license.html":{}}}],["point",{"_index":466,"title":{},"body":{"index.html":{}}}],["polite",{"_index":350,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["portions",{"_index":562,"title":{},"body":{"license.html":{}}}],["position",{"_index":110,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["positionclass",{"_index":113,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["preventduplicates",{"_index":118,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["prevents",{"_index":114,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["previous",{"_index":117,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["previoustoast",{"_index":183,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["private",{"_index":179,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["processes",{"_index":487,"title":{},"body":{"index.html":{}}}],["progress",{"_index":120,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progressbar",{"_index":119,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progressclass",{"_index":121,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progresselement",{"_index":305,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progresselement.classlist.add(options.progressclass",{"_index":383,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progresselement.classlist.remove(options.progressclass",{"_index":390,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progresselement.offsetwidth",{"_index":398,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progresselement.style.setproperty",{"_index":384,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["progresselement.style.width",{"_index":391,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["properties",{"_index":13,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrSettings.html":{}}}],["provided",{"_index":563,"title":{},"body":{"license.html":{}}}],["public",{"_index":176,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["publish",{"_index":546,"title":{},"body":{"license.html":{}}}],["publish(args",{"_index":286,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["pull",{"_index":472,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":573,"title":{},"body":{"license.html":{}}}],["quot;').replace(/'/g",{"_index":344,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["reference",{"_index":178,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["reflow",{"_index":394,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["register",{"_index":239,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["remove",{"_index":195,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["removed",{"_index":233,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["removeelement(el",{"_index":227,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["removes",{"_index":229,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["removetoast(toastelement",{"_index":196,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["replace(/&/g",{"_index":342,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["repository",{"_index":502,"title":{},"body":{"index.html":{}}}],["request",{"_index":473,"title":{},"body":{"index.html":{}}}],["requests",{"_index":481,"title":{},"body":{"index.html":{}}}],["required",{"_index":438,"title":{},"body":{"index.html":{}}}],["resolution",{"_index":492,"title":{},"body":{"index.html":{}}}],["resolve",{"_index":475,"title":{},"body":{"index.html":{}}}],["response",{"_index":308,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["response.endtime",{"_index":316,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["response.state",{"_index":314,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["restriction",{"_index":540,"title":{},"body":{"license.html":{}}}],["result",{"_index":292,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":403,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":164,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["returns",{"_index":154,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":112,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["rights",{"_index":543,"title":{},"body":{"license.html":{}}}],["rtl",{"_index":124,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["run",{"_index":467,"title":{},"body":{"index.html":{}}}],["s",{"_index":283,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["save",{"_index":451,"title":{},"body":{"index.html":{}}}],["sell",{"_index":550,"title":{},"body":{"license.html":{}}}],["set",{"_index":40,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["setaria",{"_index":347,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["setclosebutton",{"_index":376,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["seticon",{"_index":355,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["setmessage",{"_index":370,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["setprogressbar",{"_index":381,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["setrtl",{"_index":386,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["setsequence",{"_index":358,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["settimeout(hidetoast",{"_index":324,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["settings",{"_index":8,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["settings.containerid",{"_index":260,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["settitle",{"_index":362,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["shall",{"_index":559,"title":{},"body":{"license.html":{}}}],["shouldexit",{"_index":289,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["shouldexit(options",{"_index":300,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["show",{"_index":9,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["showduration",{"_index":126,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["showing",{"_index":127,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["showmethod",{"_index":129,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["shown",{"_index":53,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["shows",{"_index":255,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["simple",{"_index":440,"title":{},"body":{"index.html":{}}}],["software",{"_index":535,"title":{},"body":{"license.html":{}}}],["sole",{"_index":504,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["special",{"_index":515,"title":{},"body":{"index.html":{}}}],["specify",{"_index":95,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["src/.../toastr.ts",{"_index":425,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/toastr.ts",{"_index":6,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":430,"title":{"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":151,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["state",{"_index":148,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["statements",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":177,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["stefan",{"_index":510,"title":{},"body":{"index.html":{},"license.html":{}}}],["stickaround",{"_index":328,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["style",{"_index":16,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["subject",{"_index":500,"title":{},"body":{"index.html":{},"license.html":{}}}],["sublicense",{"_index":548,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":498,"title":{},"body":{"index.html":{}}}],["subscribe(callback",{"_index":241,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["substantial",{"_index":561,"title":{},"body":{"license.html":{}}}],["success",{"_index":34,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/enumerations.html":{}}}],["success(message",{"_index":249,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["successful",{"_index":490,"title":{},"body":{"index.html":{}}}],["suffix",{"_index":364,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["t",{"_index":163,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":61,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["taptodismiss",{"_index":137,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["target",{"_index":131,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["targetel",{"_index":220,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["targetel.appendchild(toastr.containerel",{"_index":222,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["test",{"_index":470,"title":{},"body":{"index.html":{}}}],["tests",{"_index":485,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":516,"title":{},"body":{"index.html":{}}}],["time",{"_index":60,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["timeout",{"_index":133,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["times",{"_index":69,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["title",{"_index":80,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["titleclass",{"_index":134,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["titleelement",{"_index":303,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["titleelement.classlist.add(options.titleclass",{"_index":368,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["titleelement.innerhtml",{"_index":367,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toast",{"_index":57,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastclass",{"_index":135,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement",{"_index":206,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.addeventlistener('animationend",{"_index":284,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.addeventlistener('click",{"_index":333,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.addeventlistener('mouseout",{"_index":329,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.addeventlistener('mouseover",{"_index":327,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.appendchild($messageelement",{"_index":375,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.appendchild($titleelement",{"_index":369,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.classlist.add('animate__animated",{"_index":272,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.classlist.add('rtl",{"_index":388,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.classlist.add(options.toastclass",{"_index":356,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.firstchild",{"_index":380,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.insertbefore(closeelement",{"_index":379,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.insertbefore(progresselement",{"_index":385,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.ownerdocument?.activeelement",{"_index":207,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.removeeventlistener(ev.type",{"_index":278,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.setattribute('aria",{"_index":352,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastelement.style.setproperty",{"_index":282,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toaster",{"_index":357,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toasters",{"_index":214,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastid",{"_index":147,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr",{"_index":33,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{},"index.html":{}}}],["toastr.animate(toastelement",{"_index":208,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.clearcontainer(options",{"_index":238,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.cleartoast(el",{"_index":194,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.cleartoast(toastelement",{"_index":237,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.containerel",{"_index":197,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.containerel.classlist.add(options.positionclass",{"_index":219,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.containerel.firstchild",{"_index":361,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.containerel.insertbefore(toastelement",{"_index":359,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.containerel.setattribute('id",{"_index":217,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.containerel?.children.length",{"_index":200,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.createcontainer(settings",{"_index":262,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.createelementfromhtml(options.closehtml",{"_index":307,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.getcontainer",{"_index":198,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.getcontainer(options",{"_index":236,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.getdefaults",{"_index":400,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.getoptions",{"_index":235,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.getoptions().iconclasses",{"_index":247,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.listener",{"_index":242,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.listener(args",{"_index":287,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.notify",{"_index":245,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.options",{"_index":401,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.previoustoast",{"_index":202,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.publish(response",{"_index":317,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.removeelement(toastelement",{"_index":199,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.removeelement(toastr.containerel",{"_index":201,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.removetoast(toastelement",{"_index":211,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr.toastid",{"_index":301,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastr2",{"_index":431,"title":{},"body":{"index.html":{}}}],["toastrbower",{"_index":447,"title":{},"body":{"index.html":{}}}],["toastrbuilding",{"_index":454,"title":{},"body":{"index.html":{}}}],["toastrclearoptions",{"_index":39,"title":{"interfaces/ToastrClearOptions.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["toastrevent",{"_index":144,"title":{"interfaces/ToastrEvent.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["toastriconclasses",{"_index":27,"title":{"interfaces/ToastrIconClasses.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["toastriconclasses).error",{"_index":258,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastriconclasses).info",{"_index":248,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastriconclasses).success",{"_index":251,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastriconclasses).warning",{"_index":254,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastrjs",{"_index":188,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toastrnpm",{"_index":449,"title":{},"body":{"index.html":{}}}],["toastroptions",{"_index":139,"title":{"interfaces/ToastrOptions.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["toastrsettings",{"_index":50,"title":{"interfaces/ToastrSettings.html":{}},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["toastryarn",{"_index":452,"title":{},"body":{"index.html":{}}}],["toasttype",{"_index":173,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/enumerations.html":{}}}],["toasttype.error",{"_index":257,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toasttype.info",{"_index":246,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toasttype.success",{"_index":250,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["toasttype.warning",{"_index":253,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["top",{"_index":111,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["tort",{"_index":582,"title":{},"body":{"license.html":{}}}],["tostring.call(functiontocheck",{"_index":168,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["trigger",{"_index":393,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["true",{"_index":41,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["tslint:disable",{"_index":395,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["type",{"_index":31,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"coverage.html":{}}}],["undefined",{"_index":158,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":522,"title":{},"body":{"index.html":{}}}],["unit",{"_index":484,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":167,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["use",{"_index":26,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"license.html":{}}}],["used",{"_index":67,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["user",{"_index":62,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["value",{"_index":156,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["version",{"_index":435,"title":{},"body":{"index.html":{}}}],["versions",{"_index":457,"title":{},"body":{"index.html":{}}}],["visible",{"_index":149,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["void",{"_index":49,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["warning",{"_index":35,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/enumerations.html":{}}}],["warning(message",{"_index":252,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["warranties",{"_index":569,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":564,"title":{},"body":{"license.html":{}}}],["whether",{"_index":71,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["whole",{"_index":231,"title":{},"body":{"interfaces/FadeOptions.html":{},"interfaces/ToastrClearOptions.html":{},"interfaces/ToastrEvent.html":{},"interfaces/ToastrIconClasses.html":{},"interfaces/ToastrOptions.html":{},"interfaces/ToastrSettings.html":{}}}],["without",{"_index":539,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":453,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/FadeOptions.html":{"url":"interfaces/FadeOptions.html","title":"interface - FadeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Interfaces\n    FadeOptions\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n        \n        File\n        \n        \n            src/toastr.ts\n        \n\n        \n        Description\n        \n        \n            Settings for the show and hide animations\n\n        \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                    duration\n                                \n                                \n                                    onComplete\n                                \n                                \n                                    style\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n        \n            Properties\n            \n                \n                    \n                        \n                            \n                            duration\n                        \n                        \n                                    number\n\n                        \n                        \n                            Duration (in miliseconds) of the animation\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            onComplete\n                        \n                        \n                                    function\n\n                        \n                        \n                            Called when the animation ends\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            style\n                        \n                        \n                                    string\n\n                        \n                        \n                            The css class to use for the animation\n\n                        \n                    \n\n\n\n\n\n\n\n                \n            \n        \n    \n\n\n    \n        interface ToastrIconClasses {\n    /**\n     * CSS Class to use for the error notification type\n     * @default 'toastr-error'\n     */\n    error: string;\n    /**\n     * CSS Class to use for the info notification type\n     * @default 'toastr-info'\n     */\n    info: string;\n    /**\n     * CSS Class to use for the success notification type\n     * @default 'toastr-success'\n     */\n    success: string;\n    /**\n     * CSS Class to use for the warning notification type\n     * @default 'toastr-warning'\n     */\n    warning: string;\n}\n\n/**\n * Options for clearing notifications\n */\ninterface ToastrClearOptions {\n    /**\n     * Set to true to always delete the notification, even when the element has focus\n     */\n    force: boolean;\n}\n\n/**\n * Settings for the show and hide animations\n */\ninterface FadeOptions {\n    /**\n     * Called when the animation ends\n     */\n    onComplete: () => void;\n    /**\n     * Duration (in miliseconds) of the animation\n     */\n    duration: number;\n    /**\n     * The css class to use for the animation\n     */\n    style: string;\n}\n\n/**\n * Settings for the notifications\n */\ninterface ToastrSettings {\n    /**\n     * If set to true, a 'close' button will be shown\n     * @default false\n     */\n    closeButton: boolean;\n    /**\n     * The class to add to the close button\n     * @default 'toast-close-button'\n     */\n    closeClass: string;\n    /**\n     * The amount of time (in miliseconds) the animation should take when the user clicks the close button\n     * @default 0\n     */\n    closeDuration: number;\n    /**\n     * HTML used to create the close button\n     *  @default '&times;'\n     */\n    closeHtml: string;\n    /**\n     * Whether the notification should be closed when the user hovers the notification\n     * @default true\n     */\n    closeOnHover: boolean;\n    /**\n     * DOM id of the container\n     * @default 'toast-container'\n     */\n    containerId: string;\n    /**\n     * Whether or not HTML characters in the title and message should be escaped\n     * @default false\n     */\n    escapeHtml: boolean;\n    /**\n     * The amount of time (in miliseconds) the toast should be displayed after a user hovers it\n     * @default 1000\n     */\n    extendedTimeOut: number;\n    /**\n     * The amount of time the hide animation should take\n     * @default 1000\n     */\n    hideDuration: number;\n    /**\n     * The name of the animate.css animation used for hiding the toast\n     * @default 'fadeOut'\n     */\n    hideMethod: string;\n    /**\n     * The default icon class\n     * @default 'toast-info'\n     */\n    iconClass: string;\n    /**\n     * Can be used to specify the default icon per notification type\n     */\n    iconClasses: ToastrIconClasses;\n    /**\n     * The class added to the message element of the notification\n     * @default 'toast-message'\n     */\n    messageClass: string;\n    /**\n     * If set to false, new notifications will be added at the bottom\n     * @default true\n     */\n    newestOnTop: boolean;\n    /**\n     * Called when the user clicks the notification\n     * @default noop\n     */\n    onClick: () => void;\n    /**\n     * Called when a user clicks the close button\n     * @default noop\n     */\n    onCloseClick: (event: Event) => void;\n    /**\n     * Called after the notification is hidden\n     * @default noop\n     */\n    onHidden: () => void;\n    /**\n     * Called after the notification is shown\n     * @default noop\n     */\n    onShown: () => void;\n    /**\n     * Class used to set the position of the notification\n     * @default 'toast-top-right'\n     */\n    positionClass: string;\n    /**\n     * Prevents the notifications from being shown when the message matches the previous message\n     * @default false\n     */\n    preventDuplicates: boolean;\n    /**\n     * Whether or not a progressbar should be shown\n     * @default false\n     */\n    progressBar: boolean;\n    /**\n     * Css class to set on the progressbar element\n     * @default 'toast-progress'\n     */\n    progressClass: string;\n    /**\n     *  Set to true for right-to-left languages\n     *  @default false\n     */\n    rtl: boolean;\n    /**\n     * The amount of time the hide animation should take\n     * @default 300\n     */\n    showDuration: number;\n    /**\n     * The name of the animate.css animation used for showing the toast\n     * @default 'fadeIn'\n     */\n    showMethod: string;\n    /**\n     * The element the toastr container should be added to\n     * @default: 'body'\n     */\n    target: string;\n    /**\n     * The amount of time (in miliseconds) the notification should be shown\n     * @default 5000\n     */\n    timeOut: number;\n    /**\n     * The CSS class to add to the title element\n     * @default 'toast-title'\n     */\n    titleClass: string;\n    /**\n     * The CSS class to add to the notification element\n     * @default 'toast-title'\n     */\n    toastClass: string;\n    /**\n     * Set to true to hide the notification when a user click on it\n     * @default true\n     */\n    tapToDismiss: boolean;\n}\n\n/**\n * Used to set overriden options for the notifications\n */\ninterface ToastrOptions extends Partial {}\n\n/**\n * Used as argument for toastr show and hide events\n */\ninterface ToastrEvent {\n    /** The time the notification is hidden */\n    endTime: Date;\n    /** The ID of the notification */\n    toastId: number;\n    /** The state of the toastr, visible or hidden */\n    state: 'visible' | 'hidden';\n    /** The time the toastr is created */\n    startTime: Date;\n    /** The settings for the notification */\n    options: ToastrSettings & { [key: string]: any };\n    /** The overriden options for the notification */\n    map: any;\n}\n\n/**\n * Returns true when the given value is null or undefined\n * @param value The value to check if it's null or undefined\n */\nfunction isNotNullOrUndefined(value: T | null | undefined): value is T {\n    return value != null && value !== undefined;\n}\n\n/**\n * Returns whether the given argument is a function or not\n * @param functionToCheck The value to check if it's a function\n */\nfunction isFunction(functionToCheck: unknown): functionToCheck is () => any {\n    return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * An empty function\n */\nfunction noop() {}\n\nconst enum ToastType {\n    error = 'error',\n    info = 'info',\n    success = 'success',\n    warning = 'warning',\n}\n\n/**\n * Toastr notification library\n */\nexport class Toastr {\n    /** Default settings for the notifications */\n    public static options: ToastrOptions = {};\n\n    /** Reference to the container DOM element */\n    private static containerEl: HTMLElement;\n\n    /** The message of the last toast */\n    private static previousToast: string | undefined;\n\n    /** Can be used to listen to events */\n    private static listener: (eventArgs: ToastrEvent) => void;\n\n    /** The toast id (will increment for every new toast) */\n    private static toastId = 0;\n\n    /**\n     * Get default settings from toastrjs\n     */\n    public static getDefaults(): ToastrSettings {\n        return {\n            closeButton: false,\n            closeClass: 'toast-close-button',\n            closeDuration: 0,\n            closeHtml: '&times;',\n            closeOnHover: true,\n            containerId: 'toast-container',\n            escapeHtml: false,\n            extendedTimeOut: 1000,\n            hideDuration: 1000,\n            hideMethod: 'fadeOut',\n            iconClass: 'toast-info',\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning',\n            },\n            messageClass: 'toast-message',\n            newestOnTop: true,\n            onClick: noop,\n            onCloseClick: (event: Event) => {},\n            onHidden: noop,\n            onShown: noop,\n            positionClass: 'toast-top-right',\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false,\n            showDuration: 300,\n            showMethod: 'fadeIn',\n            tapToDismiss: true,\n            target: 'body',\n            timeOut: 5000,\n            titleClass: 'toast-title',\n            toastClass: 'toast',\n        };\n    }\n\n    /**\n     * Clear toastr container\n     */\n    private static clearContainer(options: ToastrSettings) {\n        if (!isNotNullOrUndefined(Toastr.containerEl)) return;\n\n        Array.from(Toastr.containerEl.children).forEach(el => Toastr.clearToast(el as HTMLElement, options));\n    }\n\n    /**\n     * Remove a toast element\n     */\n    private static removeToast(toastElement: HTMLElement) {\n        if (!Toastr.containerEl) {\n            Toastr.containerEl = Toastr.getContainer();\n        }\n\n        Toastr.removeElement(toastElement);\n\n        if (Toastr.containerEl?.children.length === 0) {\n            Toastr.removeElement(Toastr.containerEl);\n            Toastr.previousToast = undefined;\n        }\n    }\n\n    /**\n     * Clear toastr element\n     */\n    private static clearToast(toastElement: HTMLElement | undefined, options: ToastrSettings, clearOptions?: ToastrClearOptions) {\n        const force = clearOptions?.force === true;\n        if (toastElement && (force || toastElement !== toastElement.ownerDocument?.activeElement)) {\n            Toastr.animate(toastElement, {\n                duration: options.hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                },\n            });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the container that contains all toasters\n     */\n    private static createContainer(options: ToastrSettings) {\n        Toastr.containerEl = document.createElement('div');\n        Toastr.containerEl.setAttribute('id', options.containerId);\n        Toastr.containerEl.classList.add(options.positionClass);\n        const targetEl: HTMLElement | null = document.querySelector(options.target);\n\n        if (targetEl != null) {\n            targetEl.appendChild(Toastr.containerEl);\n        } else {\n            console.warn(`Couldn't create toastr container, the 'containerEl' cannot be found.`);\n        }\n    }\n\n    /**\n     * Native remove element helper\n     */\n    private static removeElement(el: HTMLElement) {\n        el?.parentNode?.removeChild(el);\n    }\n\n    /**\n     * Removes the notification element from the dom.\n     * Clears the whole container if the notification couldn't be removed\n     * @param toastElement The notification element to remove\n     * @param clearOptions Clear options\n     */\n    public static clear(toastElement?: HTMLElement, clearOptions?: ToastrClearOptions) {\n        const options = Toastr.getOptions();\n        if (!Toastr.containerEl) {\n            Toastr.getContainer(options, false);\n        }\n        if (!Toastr.clearToast(toastElement, options, clearOptions)) {\n            Toastr.clearContainer(options);\n        }\n    }\n\n    /**\n     * Register a callback function\n     */\n    public static subscribe(callback: (eventArgs: ToastrEvent) => void) {\n        Toastr.listener = callback;\n    }\n\n    /**\n     * Show info message\n     */\n    public static info(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.info,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).info,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show success message\n     */\n    public static success(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.success,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).success,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show warning message\n     */\n    public static warning(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.warning,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).warning,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Shows an error message\n     */\n    public static error(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.error,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).error,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Get container that contains the toastr\n     */\n    public static getContainer(options?: ToastrSettings, create?: boolean) {\n        const settings = options ?? (Toastr.getOptions() as ToastrSettings);\n\n        if (settings.containerId != null) {\n            Toastr.containerEl = document.getElementById(settings.containerId) as HTMLElement;\n        }\n        if (Toastr.containerEl == null && create === true) {\n            Toastr.createContainer(settings);\n        }\n        return Toastr.containerEl;\n    }\n\n    /**\n     * Creates a DOM element from a HTML string\n     * @param htmlString The HTML string to create the DOM element(s) from\n     */\n    private static createElementFromHTML(htmlString: string): HTMLElement {\n        const div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n        return div.firstChild as HTMLElement;\n    }\n\n    /**\n     * Used to add animation to show and hide the notification\n     * @param toastElement The element to animate\n     * @param options The animation options\n     */\n    private static animate(toastElement: HTMLElement, options: FadeOptions) {\n        toastElement.classList.add('animate__animated', `animate__${options.style}`);\n\n        const onAnimationEnd = (ev: { type: string }) => {\n            if (isFunction(options.onComplete)) {\n                options.onComplete();\n            }\n\n            toastElement.removeEventListener(ev.type, onAnimationEnd);\n        };\n\n        if (!isNaN(options.duration) || 0) {\n            if (options.duration === 0) {\n                onAnimationEnd({ type: 'animationend' });\n            } else {\n                toastElement.style.setProperty('--animate-duration', options.duration / 1000 + 's');\n            }\n        }\n\n        toastElement.addEventListener('animationend', onAnimationEnd);\n    }\n\n    /**\n     * Fires events\n     */\n    private static publish(args: ToastrEvent) {\n        if (Toastr.listener) {\n            Toastr.listener(args);\n        }\n    }\n\n    /**\n     * Creates the notification\n     * @param map The overriden options\n     */\n    private static notify(map: any) {\n        const shouldExit = (_settings: ToastrSettings, _map: any) => {\n            const result = _settings.preventDuplicates === true && _map.message === Toastr.previousToast;\n            Toastr.previousToast = _map.message;\n            return result;\n        };\n\n        let options = Toastr.getOptions();\n        let iconClass = map.iconClass || options.iconClass;\n\n        if (isNotNullOrUndefined(map.optionsOverride)) {\n            options = {\n                ...options,\n                ...map.optionsOverride,\n            };\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) {\n            return;\n        }\n\n        Toastr.toastId++;\n        Toastr.containerEl = Toastr.getContainer(options, true);\n\n        let intervalId: number | undefined;\n        const toastElement = document.createElement('div');\n        const $titleElement = document.createElement('div');\n        const $messageElement = document.createElement('div');\n        const progressElement = document.createElement('div');\n        const closeElement: HTMLElement = Toastr.createElementFromHTML(options.closeHtml);\n\n        const response: ToastrEvent = {\n            toastId: Toastr.toastId,\n            state: 'visible',\n            startTime: new Date(),\n            endTime: new Date(),\n            options,\n            map,\n        };\n\n        const hideToast = (override: boolean) => {\n            const hideDuration = override && options.closeDuration !== 0 ? options.closeDuration : options.hideDuration;\n            if (toastElement === toastElement.ownerDocument?.activeElement && !override) {\n                return;\n            }\n\n            Toastr.animate(toastElement, {\n                duration: hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                    clearTimeout(intervalId);\n                    if (isFunction(options.onHidden) && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    Toastr.publish(response);\n                },\n            });\n        };\n\n        /**\n         * Display toast message\n         */\n        const displayToast = () => {\n            Toastr.animate(toastElement, {\n                duration: options.showDuration,\n                onComplete: options.onShown,\n                style: options.showMethod,\n            });\n\n            if (options.timeOut) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n            }\n        };\n\n        const handleEvents = () => {\n            if (options.closeOnHover) {\n                toastElement.addEventListener('mouseover', stickAround);\n                toastElement.addEventListener('mouseout', delayedHideToast);\n            }\n\n            if (!options.onClick && options.tapToDismiss) {\n                toastElement.addEventListener('click', () => {\n                    hideToast(false);\n                });\n            }\n\n            if (options.closeButton && closeElement) {\n                toastElement.addEventListener('click', event => {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble === false) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (isFunction(options.onClick)) {\n                toastElement.addEventListener('click', event => {\n                    options.onCloseClick(event);\n                    hideToast(false);\n                });\n            }\n        };\n\n        const escapeHtml = (source: string) => {\n            return (source ?? '').replace(/&/g, '&amp;').replace(/'/g, '&quot;').replace(/'/g, '&#39;').replace(//g, '&gt;');\n        };\n\n        const setAria = () => {\n            const ariaValue = ['toast-success', 'toast-info'].includes(map.iconClass) ? 'polite' : 'assertive';\n            toastElement.setAttribute('aria-live', ariaValue);\n        };\n\n        /**\n         * Set icons on toast\n         */\n        const setIcon = () => {\n            if (map.iconClass) {\n                toastElement.classList.add(options.toastClass, iconClass);\n            }\n        };\n\n        /**\n         * Add toaster to container\n         */\n        const setSequence = () => {\n            Toastr.containerEl.insertBefore(toastElement, options.newestOnTop ? Toastr.containerEl.firstChild : null);\n        };\n\n        /**\n         * Set title of a toast message\n         */\n        const setTitle = () => {\n            if (map.title) {\n                let suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.innerHTML += suffix;\n                $titleElement.classList.add(options.titleClass);\n                toastElement.appendChild($titleElement);\n            }\n        };\n\n        /**\n         * Set message of a toast message\n         */\n        const setMessage = () => {\n            if (map.message) {\n                let suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.innerHTML += suffix;\n                $messageElement.classList.add(options.messageClass);\n                toastElement.appendChild($messageElement);\n            }\n        };\n\n        /**\n         * Set closebutton\n         */\n        const setCloseButton = () => {\n            if (options.closeButton) {\n                closeElement.classList.add(options.closeClass);\n                closeElement.setAttribute('role', 'button');\n                toastElement.insertBefore(closeElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set progressbar\n         */\n        const setProgressBar = () => {\n            if (options.progressBar) {\n                progressElement.classList.add(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.timeOut / 1000 + 's');\n                toastElement.insertBefore(progressElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set RTL\n         */\n        const setRTL = () => {\n            if (options.rtl) {\n                toastElement.classList.add('rtl');\n            }\n        };\n\n        const delayedHideToast = () => {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                progressElement.classList.remove(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.extendedTimeOut / 1000 + 's');\n                progressElement.style.width = '100%';\n                // trigger reflow\n                // tslint:disable-next-line\n                void progressElement.offsetWidth;\n                progressElement.classList.add(options.progressClass);\n            }\n        };\n\n        const stickAround = () => {\n            clearTimeout(intervalId);\n        };\n\n        setIcon();\n        setTitle();\n        setMessage();\n        setCloseButton();\n        setProgressBar();\n        setRTL();\n        setSequence();\n        setAria();\n\n        displayToast();\n        handleEvents();\n\n        Toastr.publish(response);\n\n        return toastElement;\n    }\n\n    /**\n     * Get toaster options\n     */\n    private static getOptions(): ToastrSettings {\n        return {\n            ...Toastr.getDefaults(),\n            ...Toastr.options,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ToastrClearOptions.html":{"url":"interfaces/ToastrClearOptions.html","title":"interface - ToastrClearOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Interfaces\n    ToastrClearOptions\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n        \n        File\n        \n        \n            src/toastr.ts\n        \n\n        \n        Description\n        \n        \n            Options for clearing notifications\n\n        \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                    force\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n        \n            Properties\n            \n                \n                    \n                        \n                            \n                            force\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            Set to true to always delete the notification, even when the element has focus\n\n                        \n                    \n\n\n\n\n\n\n\n                \n            \n        \n    \n\n\n    \n        interface ToastrIconClasses {\n    /**\n     * CSS Class to use for the error notification type\n     * @default 'toastr-error'\n     */\n    error: string;\n    /**\n     * CSS Class to use for the info notification type\n     * @default 'toastr-info'\n     */\n    info: string;\n    /**\n     * CSS Class to use for the success notification type\n     * @default 'toastr-success'\n     */\n    success: string;\n    /**\n     * CSS Class to use for the warning notification type\n     * @default 'toastr-warning'\n     */\n    warning: string;\n}\n\n/**\n * Options for clearing notifications\n */\ninterface ToastrClearOptions {\n    /**\n     * Set to true to always delete the notification, even when the element has focus\n     */\n    force: boolean;\n}\n\n/**\n * Settings for the show and hide animations\n */\ninterface FadeOptions {\n    /**\n     * Called when the animation ends\n     */\n    onComplete: () => void;\n    /**\n     * Duration (in miliseconds) of the animation\n     */\n    duration: number;\n    /**\n     * The css class to use for the animation\n     */\n    style: string;\n}\n\n/**\n * Settings for the notifications\n */\ninterface ToastrSettings {\n    /**\n     * If set to true, a 'close' button will be shown\n     * @default false\n     */\n    closeButton: boolean;\n    /**\n     * The class to add to the close button\n     * @default 'toast-close-button'\n     */\n    closeClass: string;\n    /**\n     * The amount of time (in miliseconds) the animation should take when the user clicks the close button\n     * @default 0\n     */\n    closeDuration: number;\n    /**\n     * HTML used to create the close button\n     *  @default '&times;'\n     */\n    closeHtml: string;\n    /**\n     * Whether the notification should be closed when the user hovers the notification\n     * @default true\n     */\n    closeOnHover: boolean;\n    /**\n     * DOM id of the container\n     * @default 'toast-container'\n     */\n    containerId: string;\n    /**\n     * Whether or not HTML characters in the title and message should be escaped\n     * @default false\n     */\n    escapeHtml: boolean;\n    /**\n     * The amount of time (in miliseconds) the toast should be displayed after a user hovers it\n     * @default 1000\n     */\n    extendedTimeOut: number;\n    /**\n     * The amount of time the hide animation should take\n     * @default 1000\n     */\n    hideDuration: number;\n    /**\n     * The name of the animate.css animation used for hiding the toast\n     * @default 'fadeOut'\n     */\n    hideMethod: string;\n    /**\n     * The default icon class\n     * @default 'toast-info'\n     */\n    iconClass: string;\n    /**\n     * Can be used to specify the default icon per notification type\n     */\n    iconClasses: ToastrIconClasses;\n    /**\n     * The class added to the message element of the notification\n     * @default 'toast-message'\n     */\n    messageClass: string;\n    /**\n     * If set to false, new notifications will be added at the bottom\n     * @default true\n     */\n    newestOnTop: boolean;\n    /**\n     * Called when the user clicks the notification\n     * @default noop\n     */\n    onClick: () => void;\n    /**\n     * Called when a user clicks the close button\n     * @default noop\n     */\n    onCloseClick: (event: Event) => void;\n    /**\n     * Called after the notification is hidden\n     * @default noop\n     */\n    onHidden: () => void;\n    /**\n     * Called after the notification is shown\n     * @default noop\n     */\n    onShown: () => void;\n    /**\n     * Class used to set the position of the notification\n     * @default 'toast-top-right'\n     */\n    positionClass: string;\n    /**\n     * Prevents the notifications from being shown when the message matches the previous message\n     * @default false\n     */\n    preventDuplicates: boolean;\n    /**\n     * Whether or not a progressbar should be shown\n     * @default false\n     */\n    progressBar: boolean;\n    /**\n     * Css class to set on the progressbar element\n     * @default 'toast-progress'\n     */\n    progressClass: string;\n    /**\n     *  Set to true for right-to-left languages\n     *  @default false\n     */\n    rtl: boolean;\n    /**\n     * The amount of time the hide animation should take\n     * @default 300\n     */\n    showDuration: number;\n    /**\n     * The name of the animate.css animation used for showing the toast\n     * @default 'fadeIn'\n     */\n    showMethod: string;\n    /**\n     * The element the toastr container should be added to\n     * @default: 'body'\n     */\n    target: string;\n    /**\n     * The amount of time (in miliseconds) the notification should be shown\n     * @default 5000\n     */\n    timeOut: number;\n    /**\n     * The CSS class to add to the title element\n     * @default 'toast-title'\n     */\n    titleClass: string;\n    /**\n     * The CSS class to add to the notification element\n     * @default 'toast-title'\n     */\n    toastClass: string;\n    /**\n     * Set to true to hide the notification when a user click on it\n     * @default true\n     */\n    tapToDismiss: boolean;\n}\n\n/**\n * Used to set overriden options for the notifications\n */\ninterface ToastrOptions extends Partial {}\n\n/**\n * Used as argument for toastr show and hide events\n */\ninterface ToastrEvent {\n    /** The time the notification is hidden */\n    endTime: Date;\n    /** The ID of the notification */\n    toastId: number;\n    /** The state of the toastr, visible or hidden */\n    state: 'visible' | 'hidden';\n    /** The time the toastr is created */\n    startTime: Date;\n    /** The settings for the notification */\n    options: ToastrSettings & { [key: string]: any };\n    /** The overriden options for the notification */\n    map: any;\n}\n\n/**\n * Returns true when the given value is null or undefined\n * @param value The value to check if it's null or undefined\n */\nfunction isNotNullOrUndefined(value: T | null | undefined): value is T {\n    return value != null && value !== undefined;\n}\n\n/**\n * Returns whether the given argument is a function or not\n * @param functionToCheck The value to check if it's a function\n */\nfunction isFunction(functionToCheck: unknown): functionToCheck is () => any {\n    return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * An empty function\n */\nfunction noop() {}\n\nconst enum ToastType {\n    error = 'error',\n    info = 'info',\n    success = 'success',\n    warning = 'warning',\n}\n\n/**\n * Toastr notification library\n */\nexport class Toastr {\n    /** Default settings for the notifications */\n    public static options: ToastrOptions = {};\n\n    /** Reference to the container DOM element */\n    private static containerEl: HTMLElement;\n\n    /** The message of the last toast */\n    private static previousToast: string | undefined;\n\n    /** Can be used to listen to events */\n    private static listener: (eventArgs: ToastrEvent) => void;\n\n    /** The toast id (will increment for every new toast) */\n    private static toastId = 0;\n\n    /**\n     * Get default settings from toastrjs\n     */\n    public static getDefaults(): ToastrSettings {\n        return {\n            closeButton: false,\n            closeClass: 'toast-close-button',\n            closeDuration: 0,\n            closeHtml: '&times;',\n            closeOnHover: true,\n            containerId: 'toast-container',\n            escapeHtml: false,\n            extendedTimeOut: 1000,\n            hideDuration: 1000,\n            hideMethod: 'fadeOut',\n            iconClass: 'toast-info',\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning',\n            },\n            messageClass: 'toast-message',\n            newestOnTop: true,\n            onClick: noop,\n            onCloseClick: (event: Event) => {},\n            onHidden: noop,\n            onShown: noop,\n            positionClass: 'toast-top-right',\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false,\n            showDuration: 300,\n            showMethod: 'fadeIn',\n            tapToDismiss: true,\n            target: 'body',\n            timeOut: 5000,\n            titleClass: 'toast-title',\n            toastClass: 'toast',\n        };\n    }\n\n    /**\n     * Clear toastr container\n     */\n    private static clearContainer(options: ToastrSettings) {\n        if (!isNotNullOrUndefined(Toastr.containerEl)) return;\n\n        Array.from(Toastr.containerEl.children).forEach(el => Toastr.clearToast(el as HTMLElement, options));\n    }\n\n    /**\n     * Remove a toast element\n     */\n    private static removeToast(toastElement: HTMLElement) {\n        if (!Toastr.containerEl) {\n            Toastr.containerEl = Toastr.getContainer();\n        }\n\n        Toastr.removeElement(toastElement);\n\n        if (Toastr.containerEl?.children.length === 0) {\n            Toastr.removeElement(Toastr.containerEl);\n            Toastr.previousToast = undefined;\n        }\n    }\n\n    /**\n     * Clear toastr element\n     */\n    private static clearToast(toastElement: HTMLElement | undefined, options: ToastrSettings, clearOptions?: ToastrClearOptions) {\n        const force = clearOptions?.force === true;\n        if (toastElement && (force || toastElement !== toastElement.ownerDocument?.activeElement)) {\n            Toastr.animate(toastElement, {\n                duration: options.hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                },\n            });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the container that contains all toasters\n     */\n    private static createContainer(options: ToastrSettings) {\n        Toastr.containerEl = document.createElement('div');\n        Toastr.containerEl.setAttribute('id', options.containerId);\n        Toastr.containerEl.classList.add(options.positionClass);\n        const targetEl: HTMLElement | null = document.querySelector(options.target);\n\n        if (targetEl != null) {\n            targetEl.appendChild(Toastr.containerEl);\n        } else {\n            console.warn(`Couldn't create toastr container, the 'containerEl' cannot be found.`);\n        }\n    }\n\n    /**\n     * Native remove element helper\n     */\n    private static removeElement(el: HTMLElement) {\n        el?.parentNode?.removeChild(el);\n    }\n\n    /**\n     * Removes the notification element from the dom.\n     * Clears the whole container if the notification couldn't be removed\n     * @param toastElement The notification element to remove\n     * @param clearOptions Clear options\n     */\n    public static clear(toastElement?: HTMLElement, clearOptions?: ToastrClearOptions) {\n        const options = Toastr.getOptions();\n        if (!Toastr.containerEl) {\n            Toastr.getContainer(options, false);\n        }\n        if (!Toastr.clearToast(toastElement, options, clearOptions)) {\n            Toastr.clearContainer(options);\n        }\n    }\n\n    /**\n     * Register a callback function\n     */\n    public static subscribe(callback: (eventArgs: ToastrEvent) => void) {\n        Toastr.listener = callback;\n    }\n\n    /**\n     * Show info message\n     */\n    public static info(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.info,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).info,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show success message\n     */\n    public static success(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.success,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).success,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show warning message\n     */\n    public static warning(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.warning,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).warning,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Shows an error message\n     */\n    public static error(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.error,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).error,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Get container that contains the toastr\n     */\n    public static getContainer(options?: ToastrSettings, create?: boolean) {\n        const settings = options ?? (Toastr.getOptions() as ToastrSettings);\n\n        if (settings.containerId != null) {\n            Toastr.containerEl = document.getElementById(settings.containerId) as HTMLElement;\n        }\n        if (Toastr.containerEl == null && create === true) {\n            Toastr.createContainer(settings);\n        }\n        return Toastr.containerEl;\n    }\n\n    /**\n     * Creates a DOM element from a HTML string\n     * @param htmlString The HTML string to create the DOM element(s) from\n     */\n    private static createElementFromHTML(htmlString: string): HTMLElement {\n        const div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n        return div.firstChild as HTMLElement;\n    }\n\n    /**\n     * Used to add animation to show and hide the notification\n     * @param toastElement The element to animate\n     * @param options The animation options\n     */\n    private static animate(toastElement: HTMLElement, options: FadeOptions) {\n        toastElement.classList.add('animate__animated', `animate__${options.style}`);\n\n        const onAnimationEnd = (ev: { type: string }) => {\n            if (isFunction(options.onComplete)) {\n                options.onComplete();\n            }\n\n            toastElement.removeEventListener(ev.type, onAnimationEnd);\n        };\n\n        if (!isNaN(options.duration) || 0) {\n            if (options.duration === 0) {\n                onAnimationEnd({ type: 'animationend' });\n            } else {\n                toastElement.style.setProperty('--animate-duration', options.duration / 1000 + 's');\n            }\n        }\n\n        toastElement.addEventListener('animationend', onAnimationEnd);\n    }\n\n    /**\n     * Fires events\n     */\n    private static publish(args: ToastrEvent) {\n        if (Toastr.listener) {\n            Toastr.listener(args);\n        }\n    }\n\n    /**\n     * Creates the notification\n     * @param map The overriden options\n     */\n    private static notify(map: any) {\n        const shouldExit = (_settings: ToastrSettings, _map: any) => {\n            const result = _settings.preventDuplicates === true && _map.message === Toastr.previousToast;\n            Toastr.previousToast = _map.message;\n            return result;\n        };\n\n        let options = Toastr.getOptions();\n        let iconClass = map.iconClass || options.iconClass;\n\n        if (isNotNullOrUndefined(map.optionsOverride)) {\n            options = {\n                ...options,\n                ...map.optionsOverride,\n            };\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) {\n            return;\n        }\n\n        Toastr.toastId++;\n        Toastr.containerEl = Toastr.getContainer(options, true);\n\n        let intervalId: number | undefined;\n        const toastElement = document.createElement('div');\n        const $titleElement = document.createElement('div');\n        const $messageElement = document.createElement('div');\n        const progressElement = document.createElement('div');\n        const closeElement: HTMLElement = Toastr.createElementFromHTML(options.closeHtml);\n\n        const response: ToastrEvent = {\n            toastId: Toastr.toastId,\n            state: 'visible',\n            startTime: new Date(),\n            endTime: new Date(),\n            options,\n            map,\n        };\n\n        const hideToast = (override: boolean) => {\n            const hideDuration = override && options.closeDuration !== 0 ? options.closeDuration : options.hideDuration;\n            if (toastElement === toastElement.ownerDocument?.activeElement && !override) {\n                return;\n            }\n\n            Toastr.animate(toastElement, {\n                duration: hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                    clearTimeout(intervalId);\n                    if (isFunction(options.onHidden) && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    Toastr.publish(response);\n                },\n            });\n        };\n\n        /**\n         * Display toast message\n         */\n        const displayToast = () => {\n            Toastr.animate(toastElement, {\n                duration: options.showDuration,\n                onComplete: options.onShown,\n                style: options.showMethod,\n            });\n\n            if (options.timeOut) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n            }\n        };\n\n        const handleEvents = () => {\n            if (options.closeOnHover) {\n                toastElement.addEventListener('mouseover', stickAround);\n                toastElement.addEventListener('mouseout', delayedHideToast);\n            }\n\n            if (!options.onClick && options.tapToDismiss) {\n                toastElement.addEventListener('click', () => {\n                    hideToast(false);\n                });\n            }\n\n            if (options.closeButton && closeElement) {\n                toastElement.addEventListener('click', event => {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble === false) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (isFunction(options.onClick)) {\n                toastElement.addEventListener('click', event => {\n                    options.onCloseClick(event);\n                    hideToast(false);\n                });\n            }\n        };\n\n        const escapeHtml = (source: string) => {\n            return (source ?? '').replace(/&/g, '&amp;').replace(/'/g, '&quot;').replace(/'/g, '&#39;').replace(//g, '&gt;');\n        };\n\n        const setAria = () => {\n            const ariaValue = ['toast-success', 'toast-info'].includes(map.iconClass) ? 'polite' : 'assertive';\n            toastElement.setAttribute('aria-live', ariaValue);\n        };\n\n        /**\n         * Set icons on toast\n         */\n        const setIcon = () => {\n            if (map.iconClass) {\n                toastElement.classList.add(options.toastClass, iconClass);\n            }\n        };\n\n        /**\n         * Add toaster to container\n         */\n        const setSequence = () => {\n            Toastr.containerEl.insertBefore(toastElement, options.newestOnTop ? Toastr.containerEl.firstChild : null);\n        };\n\n        /**\n         * Set title of a toast message\n         */\n        const setTitle = () => {\n            if (map.title) {\n                let suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.innerHTML += suffix;\n                $titleElement.classList.add(options.titleClass);\n                toastElement.appendChild($titleElement);\n            }\n        };\n\n        /**\n         * Set message of a toast message\n         */\n        const setMessage = () => {\n            if (map.message) {\n                let suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.innerHTML += suffix;\n                $messageElement.classList.add(options.messageClass);\n                toastElement.appendChild($messageElement);\n            }\n        };\n\n        /**\n         * Set closebutton\n         */\n        const setCloseButton = () => {\n            if (options.closeButton) {\n                closeElement.classList.add(options.closeClass);\n                closeElement.setAttribute('role', 'button');\n                toastElement.insertBefore(closeElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set progressbar\n         */\n        const setProgressBar = () => {\n            if (options.progressBar) {\n                progressElement.classList.add(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.timeOut / 1000 + 's');\n                toastElement.insertBefore(progressElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set RTL\n         */\n        const setRTL = () => {\n            if (options.rtl) {\n                toastElement.classList.add('rtl');\n            }\n        };\n\n        const delayedHideToast = () => {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                progressElement.classList.remove(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.extendedTimeOut / 1000 + 's');\n                progressElement.style.width = '100%';\n                // trigger reflow\n                // tslint:disable-next-line\n                void progressElement.offsetWidth;\n                progressElement.classList.add(options.progressClass);\n            }\n        };\n\n        const stickAround = () => {\n            clearTimeout(intervalId);\n        };\n\n        setIcon();\n        setTitle();\n        setMessage();\n        setCloseButton();\n        setProgressBar();\n        setRTL();\n        setSequence();\n        setAria();\n\n        displayToast();\n        handleEvents();\n\n        Toastr.publish(response);\n\n        return toastElement;\n    }\n\n    /**\n     * Get toaster options\n     */\n    private static getOptions(): ToastrSettings {\n        return {\n            ...Toastr.getDefaults(),\n            ...Toastr.options,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ToastrEvent.html":{"url":"interfaces/ToastrEvent.html","title":"interface - ToastrEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Interfaces\n    ToastrEvent\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n        \n        File\n        \n        \n            src/toastr.ts\n        \n\n        \n        Description\n        \n        \n            Used as argument for toastr show and hide events\n\n        \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                    endTime\n                                \n                                \n                                    map\n                                \n                                \n                                    options\n                                \n                                \n                                    startTime\n                                \n                                \n                                    state\n                                \n                                \n                                    toastId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n        \n            Properties\n            \n                \n                    \n                        \n                            \n                            endTime\n                        \n                        \n                                    Date\n\n                        \n                        \n                            The time the notification is hidden \n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            map\n                        \n                        \n                                    any\n\n                        \n                        \n                            The overriden options for the notification \n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            options\n                        \n                        \n                                \n\n                        \n                        \n                            The settings for the notification \n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            startTime\n                        \n                        \n                                    Date\n\n                        \n                        \n                            The time the toastr is created \n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            state\n                        \n                        \n                                \"visible\" | \"hidden\"\n\n                        \n                        \n                            The state of the toastr, visible or hidden \n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            toastId\n                        \n                        \n                                    number\n\n                        \n                        \n                            The ID of the notification \n\n                        \n                    \n\n\n\n\n\n\n\n                \n            \n        \n    \n\n\n    \n        interface ToastrIconClasses {\n    /**\n     * CSS Class to use for the error notification type\n     * @default 'toastr-error'\n     */\n    error: string;\n    /**\n     * CSS Class to use for the info notification type\n     * @default 'toastr-info'\n     */\n    info: string;\n    /**\n     * CSS Class to use for the success notification type\n     * @default 'toastr-success'\n     */\n    success: string;\n    /**\n     * CSS Class to use for the warning notification type\n     * @default 'toastr-warning'\n     */\n    warning: string;\n}\n\n/**\n * Options for clearing notifications\n */\ninterface ToastrClearOptions {\n    /**\n     * Set to true to always delete the notification, even when the element has focus\n     */\n    force: boolean;\n}\n\n/**\n * Settings for the show and hide animations\n */\ninterface FadeOptions {\n    /**\n     * Called when the animation ends\n     */\n    onComplete: () => void;\n    /**\n     * Duration (in miliseconds) of the animation\n     */\n    duration: number;\n    /**\n     * The css class to use for the animation\n     */\n    style: string;\n}\n\n/**\n * Settings for the notifications\n */\ninterface ToastrSettings {\n    /**\n     * If set to true, a 'close' button will be shown\n     * @default false\n     */\n    closeButton: boolean;\n    /**\n     * The class to add to the close button\n     * @default 'toast-close-button'\n     */\n    closeClass: string;\n    /**\n     * The amount of time (in miliseconds) the animation should take when the user clicks the close button\n     * @default 0\n     */\n    closeDuration: number;\n    /**\n     * HTML used to create the close button\n     *  @default '&times;'\n     */\n    closeHtml: string;\n    /**\n     * Whether the notification should be closed when the user hovers the notification\n     * @default true\n     */\n    closeOnHover: boolean;\n    /**\n     * DOM id of the container\n     * @default 'toast-container'\n     */\n    containerId: string;\n    /**\n     * Whether or not HTML characters in the title and message should be escaped\n     * @default false\n     */\n    escapeHtml: boolean;\n    /**\n     * The amount of time (in miliseconds) the toast should be displayed after a user hovers it\n     * @default 1000\n     */\n    extendedTimeOut: number;\n    /**\n     * The amount of time the hide animation should take\n     * @default 1000\n     */\n    hideDuration: number;\n    /**\n     * The name of the animate.css animation used for hiding the toast\n     * @default 'fadeOut'\n     */\n    hideMethod: string;\n    /**\n     * The default icon class\n     * @default 'toast-info'\n     */\n    iconClass: string;\n    /**\n     * Can be used to specify the default icon per notification type\n     */\n    iconClasses: ToastrIconClasses;\n    /**\n     * The class added to the message element of the notification\n     * @default 'toast-message'\n     */\n    messageClass: string;\n    /**\n     * If set to false, new notifications will be added at the bottom\n     * @default true\n     */\n    newestOnTop: boolean;\n    /**\n     * Called when the user clicks the notification\n     * @default noop\n     */\n    onClick: () => void;\n    /**\n     * Called when a user clicks the close button\n     * @default noop\n     */\n    onCloseClick: (event: Event) => void;\n    /**\n     * Called after the notification is hidden\n     * @default noop\n     */\n    onHidden: () => void;\n    /**\n     * Called after the notification is shown\n     * @default noop\n     */\n    onShown: () => void;\n    /**\n     * Class used to set the position of the notification\n     * @default 'toast-top-right'\n     */\n    positionClass: string;\n    /**\n     * Prevents the notifications from being shown when the message matches the previous message\n     * @default false\n     */\n    preventDuplicates: boolean;\n    /**\n     * Whether or not a progressbar should be shown\n     * @default false\n     */\n    progressBar: boolean;\n    /**\n     * Css class to set on the progressbar element\n     * @default 'toast-progress'\n     */\n    progressClass: string;\n    /**\n     *  Set to true for right-to-left languages\n     *  @default false\n     */\n    rtl: boolean;\n    /**\n     * The amount of time the hide animation should take\n     * @default 300\n     */\n    showDuration: number;\n    /**\n     * The name of the animate.css animation used for showing the toast\n     * @default 'fadeIn'\n     */\n    showMethod: string;\n    /**\n     * The element the toastr container should be added to\n     * @default: 'body'\n     */\n    target: string;\n    /**\n     * The amount of time (in miliseconds) the notification should be shown\n     * @default 5000\n     */\n    timeOut: number;\n    /**\n     * The CSS class to add to the title element\n     * @default 'toast-title'\n     */\n    titleClass: string;\n    /**\n     * The CSS class to add to the notification element\n     * @default 'toast-title'\n     */\n    toastClass: string;\n    /**\n     * Set to true to hide the notification when a user click on it\n     * @default true\n     */\n    tapToDismiss: boolean;\n}\n\n/**\n * Used to set overriden options for the notifications\n */\ninterface ToastrOptions extends Partial {}\n\n/**\n * Used as argument for toastr show and hide events\n */\ninterface ToastrEvent {\n    /** The time the notification is hidden */\n    endTime: Date;\n    /** The ID of the notification */\n    toastId: number;\n    /** The state of the toastr, visible or hidden */\n    state: 'visible' | 'hidden';\n    /** The time the toastr is created */\n    startTime: Date;\n    /** The settings for the notification */\n    options: ToastrSettings & { [key: string]: any };\n    /** The overriden options for the notification */\n    map: any;\n}\n\n/**\n * Returns true when the given value is null or undefined\n * @param value The value to check if it's null or undefined\n */\nfunction isNotNullOrUndefined(value: T | null | undefined): value is T {\n    return value != null && value !== undefined;\n}\n\n/**\n * Returns whether the given argument is a function or not\n * @param functionToCheck The value to check if it's a function\n */\nfunction isFunction(functionToCheck: unknown): functionToCheck is () => any {\n    return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * An empty function\n */\nfunction noop() {}\n\nconst enum ToastType {\n    error = 'error',\n    info = 'info',\n    success = 'success',\n    warning = 'warning',\n}\n\n/**\n * Toastr notification library\n */\nexport class Toastr {\n    /** Default settings for the notifications */\n    public static options: ToastrOptions = {};\n\n    /** Reference to the container DOM element */\n    private static containerEl: HTMLElement;\n\n    /** The message of the last toast */\n    private static previousToast: string | undefined;\n\n    /** Can be used to listen to events */\n    private static listener: (eventArgs: ToastrEvent) => void;\n\n    /** The toast id (will increment for every new toast) */\n    private static toastId = 0;\n\n    /**\n     * Get default settings from toastrjs\n     */\n    public static getDefaults(): ToastrSettings {\n        return {\n            closeButton: false,\n            closeClass: 'toast-close-button',\n            closeDuration: 0,\n            closeHtml: '&times;',\n            closeOnHover: true,\n            containerId: 'toast-container',\n            escapeHtml: false,\n            extendedTimeOut: 1000,\n            hideDuration: 1000,\n            hideMethod: 'fadeOut',\n            iconClass: 'toast-info',\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning',\n            },\n            messageClass: 'toast-message',\n            newestOnTop: true,\n            onClick: noop,\n            onCloseClick: (event: Event) => {},\n            onHidden: noop,\n            onShown: noop,\n            positionClass: 'toast-top-right',\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false,\n            showDuration: 300,\n            showMethod: 'fadeIn',\n            tapToDismiss: true,\n            target: 'body',\n            timeOut: 5000,\n            titleClass: 'toast-title',\n            toastClass: 'toast',\n        };\n    }\n\n    /**\n     * Clear toastr container\n     */\n    private static clearContainer(options: ToastrSettings) {\n        if (!isNotNullOrUndefined(Toastr.containerEl)) return;\n\n        Array.from(Toastr.containerEl.children).forEach(el => Toastr.clearToast(el as HTMLElement, options));\n    }\n\n    /**\n     * Remove a toast element\n     */\n    private static removeToast(toastElement: HTMLElement) {\n        if (!Toastr.containerEl) {\n            Toastr.containerEl = Toastr.getContainer();\n        }\n\n        Toastr.removeElement(toastElement);\n\n        if (Toastr.containerEl?.children.length === 0) {\n            Toastr.removeElement(Toastr.containerEl);\n            Toastr.previousToast = undefined;\n        }\n    }\n\n    /**\n     * Clear toastr element\n     */\n    private static clearToast(toastElement: HTMLElement | undefined, options: ToastrSettings, clearOptions?: ToastrClearOptions) {\n        const force = clearOptions?.force === true;\n        if (toastElement && (force || toastElement !== toastElement.ownerDocument?.activeElement)) {\n            Toastr.animate(toastElement, {\n                duration: options.hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                },\n            });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the container that contains all toasters\n     */\n    private static createContainer(options: ToastrSettings) {\n        Toastr.containerEl = document.createElement('div');\n        Toastr.containerEl.setAttribute('id', options.containerId);\n        Toastr.containerEl.classList.add(options.positionClass);\n        const targetEl: HTMLElement | null = document.querySelector(options.target);\n\n        if (targetEl != null) {\n            targetEl.appendChild(Toastr.containerEl);\n        } else {\n            console.warn(`Couldn't create toastr container, the 'containerEl' cannot be found.`);\n        }\n    }\n\n    /**\n     * Native remove element helper\n     */\n    private static removeElement(el: HTMLElement) {\n        el?.parentNode?.removeChild(el);\n    }\n\n    /**\n     * Removes the notification element from the dom.\n     * Clears the whole container if the notification couldn't be removed\n     * @param toastElement The notification element to remove\n     * @param clearOptions Clear options\n     */\n    public static clear(toastElement?: HTMLElement, clearOptions?: ToastrClearOptions) {\n        const options = Toastr.getOptions();\n        if (!Toastr.containerEl) {\n            Toastr.getContainer(options, false);\n        }\n        if (!Toastr.clearToast(toastElement, options, clearOptions)) {\n            Toastr.clearContainer(options);\n        }\n    }\n\n    /**\n     * Register a callback function\n     */\n    public static subscribe(callback: (eventArgs: ToastrEvent) => void) {\n        Toastr.listener = callback;\n    }\n\n    /**\n     * Show info message\n     */\n    public static info(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.info,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).info,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show success message\n     */\n    public static success(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.success,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).success,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show warning message\n     */\n    public static warning(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.warning,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).warning,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Shows an error message\n     */\n    public static error(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.error,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).error,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Get container that contains the toastr\n     */\n    public static getContainer(options?: ToastrSettings, create?: boolean) {\n        const settings = options ?? (Toastr.getOptions() as ToastrSettings);\n\n        if (settings.containerId != null) {\n            Toastr.containerEl = document.getElementById(settings.containerId) as HTMLElement;\n        }\n        if (Toastr.containerEl == null && create === true) {\n            Toastr.createContainer(settings);\n        }\n        return Toastr.containerEl;\n    }\n\n    /**\n     * Creates a DOM element from a HTML string\n     * @param htmlString The HTML string to create the DOM element(s) from\n     */\n    private static createElementFromHTML(htmlString: string): HTMLElement {\n        const div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n        return div.firstChild as HTMLElement;\n    }\n\n    /**\n     * Used to add animation to show and hide the notification\n     * @param toastElement The element to animate\n     * @param options The animation options\n     */\n    private static animate(toastElement: HTMLElement, options: FadeOptions) {\n        toastElement.classList.add('animate__animated', `animate__${options.style}`);\n\n        const onAnimationEnd = (ev: { type: string }) => {\n            if (isFunction(options.onComplete)) {\n                options.onComplete();\n            }\n\n            toastElement.removeEventListener(ev.type, onAnimationEnd);\n        };\n\n        if (!isNaN(options.duration) || 0) {\n            if (options.duration === 0) {\n                onAnimationEnd({ type: 'animationend' });\n            } else {\n                toastElement.style.setProperty('--animate-duration', options.duration / 1000 + 's');\n            }\n        }\n\n        toastElement.addEventListener('animationend', onAnimationEnd);\n    }\n\n    /**\n     * Fires events\n     */\n    private static publish(args: ToastrEvent) {\n        if (Toastr.listener) {\n            Toastr.listener(args);\n        }\n    }\n\n    /**\n     * Creates the notification\n     * @param map The overriden options\n     */\n    private static notify(map: any) {\n        const shouldExit = (_settings: ToastrSettings, _map: any) => {\n            const result = _settings.preventDuplicates === true && _map.message === Toastr.previousToast;\n            Toastr.previousToast = _map.message;\n            return result;\n        };\n\n        let options = Toastr.getOptions();\n        let iconClass = map.iconClass || options.iconClass;\n\n        if (isNotNullOrUndefined(map.optionsOverride)) {\n            options = {\n                ...options,\n                ...map.optionsOverride,\n            };\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) {\n            return;\n        }\n\n        Toastr.toastId++;\n        Toastr.containerEl = Toastr.getContainer(options, true);\n\n        let intervalId: number | undefined;\n        const toastElement = document.createElement('div');\n        const $titleElement = document.createElement('div');\n        const $messageElement = document.createElement('div');\n        const progressElement = document.createElement('div');\n        const closeElement: HTMLElement = Toastr.createElementFromHTML(options.closeHtml);\n\n        const response: ToastrEvent = {\n            toastId: Toastr.toastId,\n            state: 'visible',\n            startTime: new Date(),\n            endTime: new Date(),\n            options,\n            map,\n        };\n\n        const hideToast = (override: boolean) => {\n            const hideDuration = override && options.closeDuration !== 0 ? options.closeDuration : options.hideDuration;\n            if (toastElement === toastElement.ownerDocument?.activeElement && !override) {\n                return;\n            }\n\n            Toastr.animate(toastElement, {\n                duration: hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                    clearTimeout(intervalId);\n                    if (isFunction(options.onHidden) && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    Toastr.publish(response);\n                },\n            });\n        };\n\n        /**\n         * Display toast message\n         */\n        const displayToast = () => {\n            Toastr.animate(toastElement, {\n                duration: options.showDuration,\n                onComplete: options.onShown,\n                style: options.showMethod,\n            });\n\n            if (options.timeOut) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n            }\n        };\n\n        const handleEvents = () => {\n            if (options.closeOnHover) {\n                toastElement.addEventListener('mouseover', stickAround);\n                toastElement.addEventListener('mouseout', delayedHideToast);\n            }\n\n            if (!options.onClick && options.tapToDismiss) {\n                toastElement.addEventListener('click', () => {\n                    hideToast(false);\n                });\n            }\n\n            if (options.closeButton && closeElement) {\n                toastElement.addEventListener('click', event => {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble === false) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (isFunction(options.onClick)) {\n                toastElement.addEventListener('click', event => {\n                    options.onCloseClick(event);\n                    hideToast(false);\n                });\n            }\n        };\n\n        const escapeHtml = (source: string) => {\n            return (source ?? '').replace(/&/g, '&amp;').replace(/'/g, '&quot;').replace(/'/g, '&#39;').replace(//g, '&gt;');\n        };\n\n        const setAria = () => {\n            const ariaValue = ['toast-success', 'toast-info'].includes(map.iconClass) ? 'polite' : 'assertive';\n            toastElement.setAttribute('aria-live', ariaValue);\n        };\n\n        /**\n         * Set icons on toast\n         */\n        const setIcon = () => {\n            if (map.iconClass) {\n                toastElement.classList.add(options.toastClass, iconClass);\n            }\n        };\n\n        /**\n         * Add toaster to container\n         */\n        const setSequence = () => {\n            Toastr.containerEl.insertBefore(toastElement, options.newestOnTop ? Toastr.containerEl.firstChild : null);\n        };\n\n        /**\n         * Set title of a toast message\n         */\n        const setTitle = () => {\n            if (map.title) {\n                let suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.innerHTML += suffix;\n                $titleElement.classList.add(options.titleClass);\n                toastElement.appendChild($titleElement);\n            }\n        };\n\n        /**\n         * Set message of a toast message\n         */\n        const setMessage = () => {\n            if (map.message) {\n                let suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.innerHTML += suffix;\n                $messageElement.classList.add(options.messageClass);\n                toastElement.appendChild($messageElement);\n            }\n        };\n\n        /**\n         * Set closebutton\n         */\n        const setCloseButton = () => {\n            if (options.closeButton) {\n                closeElement.classList.add(options.closeClass);\n                closeElement.setAttribute('role', 'button');\n                toastElement.insertBefore(closeElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set progressbar\n         */\n        const setProgressBar = () => {\n            if (options.progressBar) {\n                progressElement.classList.add(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.timeOut / 1000 + 's');\n                toastElement.insertBefore(progressElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set RTL\n         */\n        const setRTL = () => {\n            if (options.rtl) {\n                toastElement.classList.add('rtl');\n            }\n        };\n\n        const delayedHideToast = () => {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                progressElement.classList.remove(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.extendedTimeOut / 1000 + 's');\n                progressElement.style.width = '100%';\n                // trigger reflow\n                // tslint:disable-next-line\n                void progressElement.offsetWidth;\n                progressElement.classList.add(options.progressClass);\n            }\n        };\n\n        const stickAround = () => {\n            clearTimeout(intervalId);\n        };\n\n        setIcon();\n        setTitle();\n        setMessage();\n        setCloseButton();\n        setProgressBar();\n        setRTL();\n        setSequence();\n        setAria();\n\n        displayToast();\n        handleEvents();\n\n        Toastr.publish(response);\n\n        return toastElement;\n    }\n\n    /**\n     * Get toaster options\n     */\n    private static getOptions(): ToastrSettings {\n        return {\n            ...Toastr.getDefaults(),\n            ...Toastr.options,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ToastrIconClasses.html":{"url":"interfaces/ToastrIconClasses.html","title":"interface - ToastrIconClasses","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Interfaces\n    ToastrIconClasses\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n        \n        File\n        \n        \n            src/toastr.ts\n        \n\n        \n        Description\n        \n        \n            Used to specify default CSS classes per notification type\n\n        \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                    error\n                                \n                                \n                                    info\n                                \n                                \n                                    success\n                                \n                                \n                                    warning\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n        \n            Properties\n            \n                \n                    \n                        \n                            \n                            error\n                        \n                        \n                                    string\n\n                        \n                        \n                            CSS Class to use for the error notification type\n\n                        \n                        \n                            'toastr-error'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            info\n                        \n                        \n                                    string\n\n                        \n                        \n                            CSS Class to use for the info notification type\n\n                        \n                        \n                            'toastr-info'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            success\n                        \n                        \n                                    string\n\n                        \n                        \n                            CSS Class to use for the success notification type\n\n                        \n                        \n                            'toastr-success'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            warning\n                        \n                        \n                                    string\n\n                        \n                        \n                            CSS Class to use for the warning notification type\n\n                        \n                        \n                            'toastr-warning'\n\n                        \n                    \n\n\n\n\n\n\n\n                \n            \n        \n    \n\n\n    \n        interface ToastrIconClasses {\n    /**\n     * CSS Class to use for the error notification type\n     * @default 'toastr-error'\n     */\n    error: string;\n    /**\n     * CSS Class to use for the info notification type\n     * @default 'toastr-info'\n     */\n    info: string;\n    /**\n     * CSS Class to use for the success notification type\n     * @default 'toastr-success'\n     */\n    success: string;\n    /**\n     * CSS Class to use for the warning notification type\n     * @default 'toastr-warning'\n     */\n    warning: string;\n}\n\n/**\n * Options for clearing notifications\n */\ninterface ToastrClearOptions {\n    /**\n     * Set to true to always delete the notification, even when the element has focus\n     */\n    force: boolean;\n}\n\n/**\n * Settings for the show and hide animations\n */\ninterface FadeOptions {\n    /**\n     * Called when the animation ends\n     */\n    onComplete: () => void;\n    /**\n     * Duration (in miliseconds) of the animation\n     */\n    duration: number;\n    /**\n     * The css class to use for the animation\n     */\n    style: string;\n}\n\n/**\n * Settings for the notifications\n */\ninterface ToastrSettings {\n    /**\n     * If set to true, a 'close' button will be shown\n     * @default false\n     */\n    closeButton: boolean;\n    /**\n     * The class to add to the close button\n     * @default 'toast-close-button'\n     */\n    closeClass: string;\n    /**\n     * The amount of time (in miliseconds) the animation should take when the user clicks the close button\n     * @default 0\n     */\n    closeDuration: number;\n    /**\n     * HTML used to create the close button\n     *  @default '&times;'\n     */\n    closeHtml: string;\n    /**\n     * Whether the notification should be closed when the user hovers the notification\n     * @default true\n     */\n    closeOnHover: boolean;\n    /**\n     * DOM id of the container\n     * @default 'toast-container'\n     */\n    containerId: string;\n    /**\n     * Whether or not HTML characters in the title and message should be escaped\n     * @default false\n     */\n    escapeHtml: boolean;\n    /**\n     * The amount of time (in miliseconds) the toast should be displayed after a user hovers it\n     * @default 1000\n     */\n    extendedTimeOut: number;\n    /**\n     * The amount of time the hide animation should take\n     * @default 1000\n     */\n    hideDuration: number;\n    /**\n     * The name of the animate.css animation used for hiding the toast\n     * @default 'fadeOut'\n     */\n    hideMethod: string;\n    /**\n     * The default icon class\n     * @default 'toast-info'\n     */\n    iconClass: string;\n    /**\n     * Can be used to specify the default icon per notification type\n     */\n    iconClasses: ToastrIconClasses;\n    /**\n     * The class added to the message element of the notification\n     * @default 'toast-message'\n     */\n    messageClass: string;\n    /**\n     * If set to false, new notifications will be added at the bottom\n     * @default true\n     */\n    newestOnTop: boolean;\n    /**\n     * Called when the user clicks the notification\n     * @default noop\n     */\n    onClick: () => void;\n    /**\n     * Called when a user clicks the close button\n     * @default noop\n     */\n    onCloseClick: (event: Event) => void;\n    /**\n     * Called after the notification is hidden\n     * @default noop\n     */\n    onHidden: () => void;\n    /**\n     * Called after the notification is shown\n     * @default noop\n     */\n    onShown: () => void;\n    /**\n     * Class used to set the position of the notification\n     * @default 'toast-top-right'\n     */\n    positionClass: string;\n    /**\n     * Prevents the notifications from being shown when the message matches the previous message\n     * @default false\n     */\n    preventDuplicates: boolean;\n    /**\n     * Whether or not a progressbar should be shown\n     * @default false\n     */\n    progressBar: boolean;\n    /**\n     * Css class to set on the progressbar element\n     * @default 'toast-progress'\n     */\n    progressClass: string;\n    /**\n     *  Set to true for right-to-left languages\n     *  @default false\n     */\n    rtl: boolean;\n    /**\n     * The amount of time the hide animation should take\n     * @default 300\n     */\n    showDuration: number;\n    /**\n     * The name of the animate.css animation used for showing the toast\n     * @default 'fadeIn'\n     */\n    showMethod: string;\n    /**\n     * The element the toastr container should be added to\n     * @default: 'body'\n     */\n    target: string;\n    /**\n     * The amount of time (in miliseconds) the notification should be shown\n     * @default 5000\n     */\n    timeOut: number;\n    /**\n     * The CSS class to add to the title element\n     * @default 'toast-title'\n     */\n    titleClass: string;\n    /**\n     * The CSS class to add to the notification element\n     * @default 'toast-title'\n     */\n    toastClass: string;\n    /**\n     * Set to true to hide the notification when a user click on it\n     * @default true\n     */\n    tapToDismiss: boolean;\n}\n\n/**\n * Used to set overriden options for the notifications\n */\ninterface ToastrOptions extends Partial {}\n\n/**\n * Used as argument for toastr show and hide events\n */\ninterface ToastrEvent {\n    /** The time the notification is hidden */\n    endTime: Date;\n    /** The ID of the notification */\n    toastId: number;\n    /** The state of the toastr, visible or hidden */\n    state: 'visible' | 'hidden';\n    /** The time the toastr is created */\n    startTime: Date;\n    /** The settings for the notification */\n    options: ToastrSettings & { [key: string]: any };\n    /** The overriden options for the notification */\n    map: any;\n}\n\n/**\n * Returns true when the given value is null or undefined\n * @param value The value to check if it's null or undefined\n */\nfunction isNotNullOrUndefined(value: T | null | undefined): value is T {\n    return value != null && value !== undefined;\n}\n\n/**\n * Returns whether the given argument is a function or not\n * @param functionToCheck The value to check if it's a function\n */\nfunction isFunction(functionToCheck: unknown): functionToCheck is () => any {\n    return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * An empty function\n */\nfunction noop() {}\n\nconst enum ToastType {\n    error = 'error',\n    info = 'info',\n    success = 'success',\n    warning = 'warning',\n}\n\n/**\n * Toastr notification library\n */\nexport class Toastr {\n    /** Default settings for the notifications */\n    public static options: ToastrOptions = {};\n\n    /** Reference to the container DOM element */\n    private static containerEl: HTMLElement;\n\n    /** The message of the last toast */\n    private static previousToast: string | undefined;\n\n    /** Can be used to listen to events */\n    private static listener: (eventArgs: ToastrEvent) => void;\n\n    /** The toast id (will increment for every new toast) */\n    private static toastId = 0;\n\n    /**\n     * Get default settings from toastrjs\n     */\n    public static getDefaults(): ToastrSettings {\n        return {\n            closeButton: false,\n            closeClass: 'toast-close-button',\n            closeDuration: 0,\n            closeHtml: '&times;',\n            closeOnHover: true,\n            containerId: 'toast-container',\n            escapeHtml: false,\n            extendedTimeOut: 1000,\n            hideDuration: 1000,\n            hideMethod: 'fadeOut',\n            iconClass: 'toast-info',\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning',\n            },\n            messageClass: 'toast-message',\n            newestOnTop: true,\n            onClick: noop,\n            onCloseClick: (event: Event) => {},\n            onHidden: noop,\n            onShown: noop,\n            positionClass: 'toast-top-right',\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false,\n            showDuration: 300,\n            showMethod: 'fadeIn',\n            tapToDismiss: true,\n            target: 'body',\n            timeOut: 5000,\n            titleClass: 'toast-title',\n            toastClass: 'toast',\n        };\n    }\n\n    /**\n     * Clear toastr container\n     */\n    private static clearContainer(options: ToastrSettings) {\n        if (!isNotNullOrUndefined(Toastr.containerEl)) return;\n\n        Array.from(Toastr.containerEl.children).forEach(el => Toastr.clearToast(el as HTMLElement, options));\n    }\n\n    /**\n     * Remove a toast element\n     */\n    private static removeToast(toastElement: HTMLElement) {\n        if (!Toastr.containerEl) {\n            Toastr.containerEl = Toastr.getContainer();\n        }\n\n        Toastr.removeElement(toastElement);\n\n        if (Toastr.containerEl?.children.length === 0) {\n            Toastr.removeElement(Toastr.containerEl);\n            Toastr.previousToast = undefined;\n        }\n    }\n\n    /**\n     * Clear toastr element\n     */\n    private static clearToast(toastElement: HTMLElement | undefined, options: ToastrSettings, clearOptions?: ToastrClearOptions) {\n        const force = clearOptions?.force === true;\n        if (toastElement && (force || toastElement !== toastElement.ownerDocument?.activeElement)) {\n            Toastr.animate(toastElement, {\n                duration: options.hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                },\n            });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the container that contains all toasters\n     */\n    private static createContainer(options: ToastrSettings) {\n        Toastr.containerEl = document.createElement('div');\n        Toastr.containerEl.setAttribute('id', options.containerId);\n        Toastr.containerEl.classList.add(options.positionClass);\n        const targetEl: HTMLElement | null = document.querySelector(options.target);\n\n        if (targetEl != null) {\n            targetEl.appendChild(Toastr.containerEl);\n        } else {\n            console.warn(`Couldn't create toastr container, the 'containerEl' cannot be found.`);\n        }\n    }\n\n    /**\n     * Native remove element helper\n     */\n    private static removeElement(el: HTMLElement) {\n        el?.parentNode?.removeChild(el);\n    }\n\n    /**\n     * Removes the notification element from the dom.\n     * Clears the whole container if the notification couldn't be removed\n     * @param toastElement The notification element to remove\n     * @param clearOptions Clear options\n     */\n    public static clear(toastElement?: HTMLElement, clearOptions?: ToastrClearOptions) {\n        const options = Toastr.getOptions();\n        if (!Toastr.containerEl) {\n            Toastr.getContainer(options, false);\n        }\n        if (!Toastr.clearToast(toastElement, options, clearOptions)) {\n            Toastr.clearContainer(options);\n        }\n    }\n\n    /**\n     * Register a callback function\n     */\n    public static subscribe(callback: (eventArgs: ToastrEvent) => void) {\n        Toastr.listener = callback;\n    }\n\n    /**\n     * Show info message\n     */\n    public static info(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.info,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).info,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show success message\n     */\n    public static success(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.success,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).success,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show warning message\n     */\n    public static warning(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.warning,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).warning,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Shows an error message\n     */\n    public static error(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.error,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).error,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Get container that contains the toastr\n     */\n    public static getContainer(options?: ToastrSettings, create?: boolean) {\n        const settings = options ?? (Toastr.getOptions() as ToastrSettings);\n\n        if (settings.containerId != null) {\n            Toastr.containerEl = document.getElementById(settings.containerId) as HTMLElement;\n        }\n        if (Toastr.containerEl == null && create === true) {\n            Toastr.createContainer(settings);\n        }\n        return Toastr.containerEl;\n    }\n\n    /**\n     * Creates a DOM element from a HTML string\n     * @param htmlString The HTML string to create the DOM element(s) from\n     */\n    private static createElementFromHTML(htmlString: string): HTMLElement {\n        const div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n        return div.firstChild as HTMLElement;\n    }\n\n    /**\n     * Used to add animation to show and hide the notification\n     * @param toastElement The element to animate\n     * @param options The animation options\n     */\n    private static animate(toastElement: HTMLElement, options: FadeOptions) {\n        toastElement.classList.add('animate__animated', `animate__${options.style}`);\n\n        const onAnimationEnd = (ev: { type: string }) => {\n            if (isFunction(options.onComplete)) {\n                options.onComplete();\n            }\n\n            toastElement.removeEventListener(ev.type, onAnimationEnd);\n        };\n\n        if (!isNaN(options.duration) || 0) {\n            if (options.duration === 0) {\n                onAnimationEnd({ type: 'animationend' });\n            } else {\n                toastElement.style.setProperty('--animate-duration', options.duration / 1000 + 's');\n            }\n        }\n\n        toastElement.addEventListener('animationend', onAnimationEnd);\n    }\n\n    /**\n     * Fires events\n     */\n    private static publish(args: ToastrEvent) {\n        if (Toastr.listener) {\n            Toastr.listener(args);\n        }\n    }\n\n    /**\n     * Creates the notification\n     * @param map The overriden options\n     */\n    private static notify(map: any) {\n        const shouldExit = (_settings: ToastrSettings, _map: any) => {\n            const result = _settings.preventDuplicates === true && _map.message === Toastr.previousToast;\n            Toastr.previousToast = _map.message;\n            return result;\n        };\n\n        let options = Toastr.getOptions();\n        let iconClass = map.iconClass || options.iconClass;\n\n        if (isNotNullOrUndefined(map.optionsOverride)) {\n            options = {\n                ...options,\n                ...map.optionsOverride,\n            };\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) {\n            return;\n        }\n\n        Toastr.toastId++;\n        Toastr.containerEl = Toastr.getContainer(options, true);\n\n        let intervalId: number | undefined;\n        const toastElement = document.createElement('div');\n        const $titleElement = document.createElement('div');\n        const $messageElement = document.createElement('div');\n        const progressElement = document.createElement('div');\n        const closeElement: HTMLElement = Toastr.createElementFromHTML(options.closeHtml);\n\n        const response: ToastrEvent = {\n            toastId: Toastr.toastId,\n            state: 'visible',\n            startTime: new Date(),\n            endTime: new Date(),\n            options,\n            map,\n        };\n\n        const hideToast = (override: boolean) => {\n            const hideDuration = override && options.closeDuration !== 0 ? options.closeDuration : options.hideDuration;\n            if (toastElement === toastElement.ownerDocument?.activeElement && !override) {\n                return;\n            }\n\n            Toastr.animate(toastElement, {\n                duration: hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                    clearTimeout(intervalId);\n                    if (isFunction(options.onHidden) && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    Toastr.publish(response);\n                },\n            });\n        };\n\n        /**\n         * Display toast message\n         */\n        const displayToast = () => {\n            Toastr.animate(toastElement, {\n                duration: options.showDuration,\n                onComplete: options.onShown,\n                style: options.showMethod,\n            });\n\n            if (options.timeOut) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n            }\n        };\n\n        const handleEvents = () => {\n            if (options.closeOnHover) {\n                toastElement.addEventListener('mouseover', stickAround);\n                toastElement.addEventListener('mouseout', delayedHideToast);\n            }\n\n            if (!options.onClick && options.tapToDismiss) {\n                toastElement.addEventListener('click', () => {\n                    hideToast(false);\n                });\n            }\n\n            if (options.closeButton && closeElement) {\n                toastElement.addEventListener('click', event => {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble === false) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (isFunction(options.onClick)) {\n                toastElement.addEventListener('click', event => {\n                    options.onCloseClick(event);\n                    hideToast(false);\n                });\n            }\n        };\n\n        const escapeHtml = (source: string) => {\n            return (source ?? '').replace(/&/g, '&amp;').replace(/'/g, '&quot;').replace(/'/g, '&#39;').replace(//g, '&gt;');\n        };\n\n        const setAria = () => {\n            const ariaValue = ['toast-success', 'toast-info'].includes(map.iconClass) ? 'polite' : 'assertive';\n            toastElement.setAttribute('aria-live', ariaValue);\n        };\n\n        /**\n         * Set icons on toast\n         */\n        const setIcon = () => {\n            if (map.iconClass) {\n                toastElement.classList.add(options.toastClass, iconClass);\n            }\n        };\n\n        /**\n         * Add toaster to container\n         */\n        const setSequence = () => {\n            Toastr.containerEl.insertBefore(toastElement, options.newestOnTop ? Toastr.containerEl.firstChild : null);\n        };\n\n        /**\n         * Set title of a toast message\n         */\n        const setTitle = () => {\n            if (map.title) {\n                let suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.innerHTML += suffix;\n                $titleElement.classList.add(options.titleClass);\n                toastElement.appendChild($titleElement);\n            }\n        };\n\n        /**\n         * Set message of a toast message\n         */\n        const setMessage = () => {\n            if (map.message) {\n                let suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.innerHTML += suffix;\n                $messageElement.classList.add(options.messageClass);\n                toastElement.appendChild($messageElement);\n            }\n        };\n\n        /**\n         * Set closebutton\n         */\n        const setCloseButton = () => {\n            if (options.closeButton) {\n                closeElement.classList.add(options.closeClass);\n                closeElement.setAttribute('role', 'button');\n                toastElement.insertBefore(closeElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set progressbar\n         */\n        const setProgressBar = () => {\n            if (options.progressBar) {\n                progressElement.classList.add(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.timeOut / 1000 + 's');\n                toastElement.insertBefore(progressElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set RTL\n         */\n        const setRTL = () => {\n            if (options.rtl) {\n                toastElement.classList.add('rtl');\n            }\n        };\n\n        const delayedHideToast = () => {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                progressElement.classList.remove(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.extendedTimeOut / 1000 + 's');\n                progressElement.style.width = '100%';\n                // trigger reflow\n                // tslint:disable-next-line\n                void progressElement.offsetWidth;\n                progressElement.classList.add(options.progressClass);\n            }\n        };\n\n        const stickAround = () => {\n            clearTimeout(intervalId);\n        };\n\n        setIcon();\n        setTitle();\n        setMessage();\n        setCloseButton();\n        setProgressBar();\n        setRTL();\n        setSequence();\n        setAria();\n\n        displayToast();\n        handleEvents();\n\n        Toastr.publish(response);\n\n        return toastElement;\n    }\n\n    /**\n     * Get toaster options\n     */\n    private static getOptions(): ToastrSettings {\n        return {\n            ...Toastr.getDefaults(),\n            ...Toastr.options,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ToastrOptions.html":{"url":"interfaces/ToastrOptions.html","title":"interface - ToastrOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Interfaces\n    ToastrOptions\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n        \n        File\n        \n        \n            src/toastr.ts\n        \n\n        \n        Description\n        \n        \n            Used to set overriden options for the notifications\n\n        \n\n        \n        Extends\n        \n        \n                Partial\n        \n\n\n\n\n    \n\n\n    \n        interface ToastrIconClasses {\n    /**\n     * CSS Class to use for the error notification type\n     * @default 'toastr-error'\n     */\n    error: string;\n    /**\n     * CSS Class to use for the info notification type\n     * @default 'toastr-info'\n     */\n    info: string;\n    /**\n     * CSS Class to use for the success notification type\n     * @default 'toastr-success'\n     */\n    success: string;\n    /**\n     * CSS Class to use for the warning notification type\n     * @default 'toastr-warning'\n     */\n    warning: string;\n}\n\n/**\n * Options for clearing notifications\n */\ninterface ToastrClearOptions {\n    /**\n     * Set to true to always delete the notification, even when the element has focus\n     */\n    force: boolean;\n}\n\n/**\n * Settings for the show and hide animations\n */\ninterface FadeOptions {\n    /**\n     * Called when the animation ends\n     */\n    onComplete: () => void;\n    /**\n     * Duration (in miliseconds) of the animation\n     */\n    duration: number;\n    /**\n     * The css class to use for the animation\n     */\n    style: string;\n}\n\n/**\n * Settings for the notifications\n */\ninterface ToastrSettings {\n    /**\n     * If set to true, a 'close' button will be shown\n     * @default false\n     */\n    closeButton: boolean;\n    /**\n     * The class to add to the close button\n     * @default 'toast-close-button'\n     */\n    closeClass: string;\n    /**\n     * The amount of time (in miliseconds) the animation should take when the user clicks the close button\n     * @default 0\n     */\n    closeDuration: number;\n    /**\n     * HTML used to create the close button\n     *  @default '&times;'\n     */\n    closeHtml: string;\n    /**\n     * Whether the notification should be closed when the user hovers the notification\n     * @default true\n     */\n    closeOnHover: boolean;\n    /**\n     * DOM id of the container\n     * @default 'toast-container'\n     */\n    containerId: string;\n    /**\n     * Whether or not HTML characters in the title and message should be escaped\n     * @default false\n     */\n    escapeHtml: boolean;\n    /**\n     * The amount of time (in miliseconds) the toast should be displayed after a user hovers it\n     * @default 1000\n     */\n    extendedTimeOut: number;\n    /**\n     * The amount of time the hide animation should take\n     * @default 1000\n     */\n    hideDuration: number;\n    /**\n     * The name of the animate.css animation used for hiding the toast\n     * @default 'fadeOut'\n     */\n    hideMethod: string;\n    /**\n     * The default icon class\n     * @default 'toast-info'\n     */\n    iconClass: string;\n    /**\n     * Can be used to specify the default icon per notification type\n     */\n    iconClasses: ToastrIconClasses;\n    /**\n     * The class added to the message element of the notification\n     * @default 'toast-message'\n     */\n    messageClass: string;\n    /**\n     * If set to false, new notifications will be added at the bottom\n     * @default true\n     */\n    newestOnTop: boolean;\n    /**\n     * Called when the user clicks the notification\n     * @default noop\n     */\n    onClick: () => void;\n    /**\n     * Called when a user clicks the close button\n     * @default noop\n     */\n    onCloseClick: (event: Event) => void;\n    /**\n     * Called after the notification is hidden\n     * @default noop\n     */\n    onHidden: () => void;\n    /**\n     * Called after the notification is shown\n     * @default noop\n     */\n    onShown: () => void;\n    /**\n     * Class used to set the position of the notification\n     * @default 'toast-top-right'\n     */\n    positionClass: string;\n    /**\n     * Prevents the notifications from being shown when the message matches the previous message\n     * @default false\n     */\n    preventDuplicates: boolean;\n    /**\n     * Whether or not a progressbar should be shown\n     * @default false\n     */\n    progressBar: boolean;\n    /**\n     * Css class to set on the progressbar element\n     * @default 'toast-progress'\n     */\n    progressClass: string;\n    /**\n     *  Set to true for right-to-left languages\n     *  @default false\n     */\n    rtl: boolean;\n    /**\n     * The amount of time the hide animation should take\n     * @default 300\n     */\n    showDuration: number;\n    /**\n     * The name of the animate.css animation used for showing the toast\n     * @default 'fadeIn'\n     */\n    showMethod: string;\n    /**\n     * The element the toastr container should be added to\n     * @default: 'body'\n     */\n    target: string;\n    /**\n     * The amount of time (in miliseconds) the notification should be shown\n     * @default 5000\n     */\n    timeOut: number;\n    /**\n     * The CSS class to add to the title element\n     * @default 'toast-title'\n     */\n    titleClass: string;\n    /**\n     * The CSS class to add to the notification element\n     * @default 'toast-title'\n     */\n    toastClass: string;\n    /**\n     * Set to true to hide the notification when a user click on it\n     * @default true\n     */\n    tapToDismiss: boolean;\n}\n\n/**\n * Used to set overriden options for the notifications\n */\ninterface ToastrOptions extends Partial {}\n\n/**\n * Used as argument for toastr show and hide events\n */\ninterface ToastrEvent {\n    /** The time the notification is hidden */\n    endTime: Date;\n    /** The ID of the notification */\n    toastId: number;\n    /** The state of the toastr, visible or hidden */\n    state: 'visible' | 'hidden';\n    /** The time the toastr is created */\n    startTime: Date;\n    /** The settings for the notification */\n    options: ToastrSettings & { [key: string]: any };\n    /** The overriden options for the notification */\n    map: any;\n}\n\n/**\n * Returns true when the given value is null or undefined\n * @param value The value to check if it's null or undefined\n */\nfunction isNotNullOrUndefined(value: T | null | undefined): value is T {\n    return value != null && value !== undefined;\n}\n\n/**\n * Returns whether the given argument is a function or not\n * @param functionToCheck The value to check if it's a function\n */\nfunction isFunction(functionToCheck: unknown): functionToCheck is () => any {\n    return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * An empty function\n */\nfunction noop() {}\n\nconst enum ToastType {\n    error = 'error',\n    info = 'info',\n    success = 'success',\n    warning = 'warning',\n}\n\n/**\n * Toastr notification library\n */\nexport class Toastr {\n    /** Default settings for the notifications */\n    public static options: ToastrOptions = {};\n\n    /** Reference to the container DOM element */\n    private static containerEl: HTMLElement;\n\n    /** The message of the last toast */\n    private static previousToast: string | undefined;\n\n    /** Can be used to listen to events */\n    private static listener: (eventArgs: ToastrEvent) => void;\n\n    /** The toast id (will increment for every new toast) */\n    private static toastId = 0;\n\n    /**\n     * Get default settings from toastrjs\n     */\n    public static getDefaults(): ToastrSettings {\n        return {\n            closeButton: false,\n            closeClass: 'toast-close-button',\n            closeDuration: 0,\n            closeHtml: '&times;',\n            closeOnHover: true,\n            containerId: 'toast-container',\n            escapeHtml: false,\n            extendedTimeOut: 1000,\n            hideDuration: 1000,\n            hideMethod: 'fadeOut',\n            iconClass: 'toast-info',\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning',\n            },\n            messageClass: 'toast-message',\n            newestOnTop: true,\n            onClick: noop,\n            onCloseClick: (event: Event) => {},\n            onHidden: noop,\n            onShown: noop,\n            positionClass: 'toast-top-right',\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false,\n            showDuration: 300,\n            showMethod: 'fadeIn',\n            tapToDismiss: true,\n            target: 'body',\n            timeOut: 5000,\n            titleClass: 'toast-title',\n            toastClass: 'toast',\n        };\n    }\n\n    /**\n     * Clear toastr container\n     */\n    private static clearContainer(options: ToastrSettings) {\n        if (!isNotNullOrUndefined(Toastr.containerEl)) return;\n\n        Array.from(Toastr.containerEl.children).forEach(el => Toastr.clearToast(el as HTMLElement, options));\n    }\n\n    /**\n     * Remove a toast element\n     */\n    private static removeToast(toastElement: HTMLElement) {\n        if (!Toastr.containerEl) {\n            Toastr.containerEl = Toastr.getContainer();\n        }\n\n        Toastr.removeElement(toastElement);\n\n        if (Toastr.containerEl?.children.length === 0) {\n            Toastr.removeElement(Toastr.containerEl);\n            Toastr.previousToast = undefined;\n        }\n    }\n\n    /**\n     * Clear toastr element\n     */\n    private static clearToast(toastElement: HTMLElement | undefined, options: ToastrSettings, clearOptions?: ToastrClearOptions) {\n        const force = clearOptions?.force === true;\n        if (toastElement && (force || toastElement !== toastElement.ownerDocument?.activeElement)) {\n            Toastr.animate(toastElement, {\n                duration: options.hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                },\n            });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the container that contains all toasters\n     */\n    private static createContainer(options: ToastrSettings) {\n        Toastr.containerEl = document.createElement('div');\n        Toastr.containerEl.setAttribute('id', options.containerId);\n        Toastr.containerEl.classList.add(options.positionClass);\n        const targetEl: HTMLElement | null = document.querySelector(options.target);\n\n        if (targetEl != null) {\n            targetEl.appendChild(Toastr.containerEl);\n        } else {\n            console.warn(`Couldn't create toastr container, the 'containerEl' cannot be found.`);\n        }\n    }\n\n    /**\n     * Native remove element helper\n     */\n    private static removeElement(el: HTMLElement) {\n        el?.parentNode?.removeChild(el);\n    }\n\n    /**\n     * Removes the notification element from the dom.\n     * Clears the whole container if the notification couldn't be removed\n     * @param toastElement The notification element to remove\n     * @param clearOptions Clear options\n     */\n    public static clear(toastElement?: HTMLElement, clearOptions?: ToastrClearOptions) {\n        const options = Toastr.getOptions();\n        if (!Toastr.containerEl) {\n            Toastr.getContainer(options, false);\n        }\n        if (!Toastr.clearToast(toastElement, options, clearOptions)) {\n            Toastr.clearContainer(options);\n        }\n    }\n\n    /**\n     * Register a callback function\n     */\n    public static subscribe(callback: (eventArgs: ToastrEvent) => void) {\n        Toastr.listener = callback;\n    }\n\n    /**\n     * Show info message\n     */\n    public static info(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.info,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).info,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show success message\n     */\n    public static success(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.success,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).success,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show warning message\n     */\n    public static warning(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.warning,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).warning,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Shows an error message\n     */\n    public static error(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.error,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).error,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Get container that contains the toastr\n     */\n    public static getContainer(options?: ToastrSettings, create?: boolean) {\n        const settings = options ?? (Toastr.getOptions() as ToastrSettings);\n\n        if (settings.containerId != null) {\n            Toastr.containerEl = document.getElementById(settings.containerId) as HTMLElement;\n        }\n        if (Toastr.containerEl == null && create === true) {\n            Toastr.createContainer(settings);\n        }\n        return Toastr.containerEl;\n    }\n\n    /**\n     * Creates a DOM element from a HTML string\n     * @param htmlString The HTML string to create the DOM element(s) from\n     */\n    private static createElementFromHTML(htmlString: string): HTMLElement {\n        const div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n        return div.firstChild as HTMLElement;\n    }\n\n    /**\n     * Used to add animation to show and hide the notification\n     * @param toastElement The element to animate\n     * @param options The animation options\n     */\n    private static animate(toastElement: HTMLElement, options: FadeOptions) {\n        toastElement.classList.add('animate__animated', `animate__${options.style}`);\n\n        const onAnimationEnd = (ev: { type: string }) => {\n            if (isFunction(options.onComplete)) {\n                options.onComplete();\n            }\n\n            toastElement.removeEventListener(ev.type, onAnimationEnd);\n        };\n\n        if (!isNaN(options.duration) || 0) {\n            if (options.duration === 0) {\n                onAnimationEnd({ type: 'animationend' });\n            } else {\n                toastElement.style.setProperty('--animate-duration', options.duration / 1000 + 's');\n            }\n        }\n\n        toastElement.addEventListener('animationend', onAnimationEnd);\n    }\n\n    /**\n     * Fires events\n     */\n    private static publish(args: ToastrEvent) {\n        if (Toastr.listener) {\n            Toastr.listener(args);\n        }\n    }\n\n    /**\n     * Creates the notification\n     * @param map The overriden options\n     */\n    private static notify(map: any) {\n        const shouldExit = (_settings: ToastrSettings, _map: any) => {\n            const result = _settings.preventDuplicates === true && _map.message === Toastr.previousToast;\n            Toastr.previousToast = _map.message;\n            return result;\n        };\n\n        let options = Toastr.getOptions();\n        let iconClass = map.iconClass || options.iconClass;\n\n        if (isNotNullOrUndefined(map.optionsOverride)) {\n            options = {\n                ...options,\n                ...map.optionsOverride,\n            };\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) {\n            return;\n        }\n\n        Toastr.toastId++;\n        Toastr.containerEl = Toastr.getContainer(options, true);\n\n        let intervalId: number | undefined;\n        const toastElement = document.createElement('div');\n        const $titleElement = document.createElement('div');\n        const $messageElement = document.createElement('div');\n        const progressElement = document.createElement('div');\n        const closeElement: HTMLElement = Toastr.createElementFromHTML(options.closeHtml);\n\n        const response: ToastrEvent = {\n            toastId: Toastr.toastId,\n            state: 'visible',\n            startTime: new Date(),\n            endTime: new Date(),\n            options,\n            map,\n        };\n\n        const hideToast = (override: boolean) => {\n            const hideDuration = override && options.closeDuration !== 0 ? options.closeDuration : options.hideDuration;\n            if (toastElement === toastElement.ownerDocument?.activeElement && !override) {\n                return;\n            }\n\n            Toastr.animate(toastElement, {\n                duration: hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                    clearTimeout(intervalId);\n                    if (isFunction(options.onHidden) && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    Toastr.publish(response);\n                },\n            });\n        };\n\n        /**\n         * Display toast message\n         */\n        const displayToast = () => {\n            Toastr.animate(toastElement, {\n                duration: options.showDuration,\n                onComplete: options.onShown,\n                style: options.showMethod,\n            });\n\n            if (options.timeOut) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n            }\n        };\n\n        const handleEvents = () => {\n            if (options.closeOnHover) {\n                toastElement.addEventListener('mouseover', stickAround);\n                toastElement.addEventListener('mouseout', delayedHideToast);\n            }\n\n            if (!options.onClick && options.tapToDismiss) {\n                toastElement.addEventListener('click', () => {\n                    hideToast(false);\n                });\n            }\n\n            if (options.closeButton && closeElement) {\n                toastElement.addEventListener('click', event => {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble === false) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (isFunction(options.onClick)) {\n                toastElement.addEventListener('click', event => {\n                    options.onCloseClick(event);\n                    hideToast(false);\n                });\n            }\n        };\n\n        const escapeHtml = (source: string) => {\n            return (source ?? '').replace(/&/g, '&amp;').replace(/'/g, '&quot;').replace(/'/g, '&#39;').replace(//g, '&gt;');\n        };\n\n        const setAria = () => {\n            const ariaValue = ['toast-success', 'toast-info'].includes(map.iconClass) ? 'polite' : 'assertive';\n            toastElement.setAttribute('aria-live', ariaValue);\n        };\n\n        /**\n         * Set icons on toast\n         */\n        const setIcon = () => {\n            if (map.iconClass) {\n                toastElement.classList.add(options.toastClass, iconClass);\n            }\n        };\n\n        /**\n         * Add toaster to container\n         */\n        const setSequence = () => {\n            Toastr.containerEl.insertBefore(toastElement, options.newestOnTop ? Toastr.containerEl.firstChild : null);\n        };\n\n        /**\n         * Set title of a toast message\n         */\n        const setTitle = () => {\n            if (map.title) {\n                let suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.innerHTML += suffix;\n                $titleElement.classList.add(options.titleClass);\n                toastElement.appendChild($titleElement);\n            }\n        };\n\n        /**\n         * Set message of a toast message\n         */\n        const setMessage = () => {\n            if (map.message) {\n                let suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.innerHTML += suffix;\n                $messageElement.classList.add(options.messageClass);\n                toastElement.appendChild($messageElement);\n            }\n        };\n\n        /**\n         * Set closebutton\n         */\n        const setCloseButton = () => {\n            if (options.closeButton) {\n                closeElement.classList.add(options.closeClass);\n                closeElement.setAttribute('role', 'button');\n                toastElement.insertBefore(closeElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set progressbar\n         */\n        const setProgressBar = () => {\n            if (options.progressBar) {\n                progressElement.classList.add(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.timeOut / 1000 + 's');\n                toastElement.insertBefore(progressElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set RTL\n         */\n        const setRTL = () => {\n            if (options.rtl) {\n                toastElement.classList.add('rtl');\n            }\n        };\n\n        const delayedHideToast = () => {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                progressElement.classList.remove(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.extendedTimeOut / 1000 + 's');\n                progressElement.style.width = '100%';\n                // trigger reflow\n                // tslint:disable-next-line\n                void progressElement.offsetWidth;\n                progressElement.classList.add(options.progressClass);\n            }\n        };\n\n        const stickAround = () => {\n            clearTimeout(intervalId);\n        };\n\n        setIcon();\n        setTitle();\n        setMessage();\n        setCloseButton();\n        setProgressBar();\n        setRTL();\n        setSequence();\n        setAria();\n\n        displayToast();\n        handleEvents();\n\n        Toastr.publish(response);\n\n        return toastElement;\n    }\n\n    /**\n     * Get toaster options\n     */\n    private static getOptions(): ToastrSettings {\n        return {\n            ...Toastr.getDefaults(),\n            ...Toastr.options,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ToastrSettings.html":{"url":"interfaces/ToastrSettings.html","title":"interface - ToastrSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Interfaces\n    ToastrSettings\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n        \n        File\n        \n        \n            src/toastr.ts\n        \n\n        \n        Description\n        \n        \n            Settings for the notifications\n\n        \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                    closeButton\n                                \n                                \n                                    closeClass\n                                \n                                \n                                    closeDuration\n                                \n                                \n                                    closeHtml\n                                \n                                \n                                    closeOnHover\n                                \n                                \n                                    containerId\n                                \n                                \n                                    escapeHtml\n                                \n                                \n                                    extendedTimeOut\n                                \n                                \n                                    hideDuration\n                                \n                                \n                                    hideMethod\n                                \n                                \n                                    iconClass\n                                \n                                \n                                    iconClasses\n                                \n                                \n                                    messageClass\n                                \n                                \n                                    newestOnTop\n                                \n                                \n                                    onClick\n                                \n                                \n                                    onCloseClick\n                                \n                                \n                                    onHidden\n                                \n                                \n                                    onShown\n                                \n                                \n                                    positionClass\n                                \n                                \n                                    preventDuplicates\n                                \n                                \n                                    progressBar\n                                \n                                \n                                    progressClass\n                                \n                                \n                                    rtl\n                                \n                                \n                                    showDuration\n                                \n                                \n                                    showMethod\n                                \n                                \n                                    tapToDismiss\n                                \n                                \n                                    target\n                                \n                                \n                                    timeOut\n                                \n                                \n                                    titleClass\n                                \n                                \n                                    toastClass\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n        \n            Properties\n            \n                \n                    \n                        \n                            \n                            closeButton\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            If set to true, a 'close' button will be shown\n\n                        \n                        \n                            false\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            closeClass\n                        \n                        \n                                    string\n\n                        \n                        \n                            The class to add to the close button\n\n                        \n                        \n                            'toast-close-button'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            closeDuration\n                        \n                        \n                                    number\n\n                        \n                        \n                            The amount of time (in miliseconds) the animation should take when the user clicks the close button\n\n                        \n                        \n                            0\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            closeHtml\n                        \n                        \n                                    string\n\n                        \n                        \n                            HTML used to create the close button\n\n                        \n                        \n                            '×'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            closeOnHover\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            Whether the notification should be closed when the user hovers the notification\n\n                        \n                        \n                            true\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            containerId\n                        \n                        \n                                    string\n\n                        \n                        \n                            DOM id of the container\n\n                        \n                        \n                            'toast-container'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            escapeHtml\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            Whether or not HTML characters in the title and message should be escaped\n\n                        \n                        \n                            false\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            extendedTimeOut\n                        \n                        \n                                    number\n\n                        \n                        \n                            The amount of time (in miliseconds) the toast should be displayed after a user hovers it\n\n                        \n                        \n                            1000\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            hideDuration\n                        \n                        \n                                    number\n\n                        \n                        \n                            The amount of time the hide animation should take\n\n                        \n                        \n                            1000\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            hideMethod\n                        \n                        \n                                    string\n\n                        \n                        \n                            The name of the animate.css animation used for hiding the toast\n\n                        \n                        \n                            'fadeOut'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            iconClass\n                        \n                        \n                                    string\n\n                        \n                        \n                            The default icon class\n\n                        \n                        \n                            'toast-info'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            iconClasses\n                        \n                        \n                                    ToastrIconClasses\n\n                        \n                        \n                            Can be used to specify the default icon per notification type\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            messageClass\n                        \n                        \n                                    string\n\n                        \n                        \n                            The class added to the message element of the notification\n\n                        \n                        \n                            'toast-message'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            newestOnTop\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            If set to false, new notifications will be added at the bottom\n\n                        \n                        \n                            true\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            onClick\n                        \n                        \n                                    function\n\n                        \n                        \n                            Called when the user clicks the notification\n\n                        \n                        \n                            noop\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            onCloseClick\n                        \n                        \n                                    function\n\n                        \n                        \n                            Called when a user clicks the close button\n\n                        \n                        \n                            noop\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            onHidden\n                        \n                        \n                                    function\n\n                        \n                        \n                            Called after the notification is hidden\n\n                        \n                        \n                            noop\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            onShown\n                        \n                        \n                                    function\n\n                        \n                        \n                            Called after the notification is shown\n\n                        \n                        \n                            noop\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            positionClass\n                        \n                        \n                                    string\n\n                        \n                        \n                            Class used to set the position of the notification\n\n                        \n                        \n                            'toast-top-right'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            preventDuplicates\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            Prevents the notifications from being shown when the message matches the previous message\n\n                        \n                        \n                            false\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            progressBar\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            Whether or not a progressbar should be shown\n\n                        \n                        \n                            false\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            progressClass\n                        \n                        \n                                    string\n\n                        \n                        \n                            Css class to set on the progressbar element\n\n                        \n                        \n                            'toast-progress'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            rtl\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            Set to true for right-to-left languages\n\n                        \n                        \n                            false\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            showDuration\n                        \n                        \n                                    number\n\n                        \n                        \n                            The amount of time the hide animation should take\n\n                        \n                        \n                            300\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            showMethod\n                        \n                        \n                                    string\n\n                        \n                        \n                            The name of the animate.css animation used for showing the toast\n\n                        \n                        \n                            'fadeIn'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            tapToDismiss\n                        \n                        \n                                    boolean\n\n                        \n                        \n                            Set to true to hide the notification when a user click on it\n\n                        \n                        \n                            true\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            target\n                        \n                        \n                                    string\n\n                        \n                        \n                            The element the toastr container should be added to\n\n                        \n                        \n                            : 'body'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            timeOut\n                        \n                        \n                                    number\n\n                        \n                        \n                            The amount of time (in miliseconds) the notification should be shown\n\n                        \n                        \n                            5000\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            titleClass\n                        \n                        \n                                    string\n\n                        \n                        \n                            The CSS class to add to the title element\n\n                        \n                        \n                            'toast-title'\n\n                        \n                    \n\n\n\n\n\n\n\n                    \n                        \n                            \n                            toastClass\n                        \n                        \n                                    string\n\n                        \n                        \n                            The CSS class to add to the notification element\n\n                        \n                        \n                            'toast-title'\n\n                        \n                    \n\n\n\n\n\n\n\n                \n            \n        \n    \n\n\n    \n        interface ToastrIconClasses {\n    /**\n     * CSS Class to use for the error notification type\n     * @default 'toastr-error'\n     */\n    error: string;\n    /**\n     * CSS Class to use for the info notification type\n     * @default 'toastr-info'\n     */\n    info: string;\n    /**\n     * CSS Class to use for the success notification type\n     * @default 'toastr-success'\n     */\n    success: string;\n    /**\n     * CSS Class to use for the warning notification type\n     * @default 'toastr-warning'\n     */\n    warning: string;\n}\n\n/**\n * Options for clearing notifications\n */\ninterface ToastrClearOptions {\n    /**\n     * Set to true to always delete the notification, even when the element has focus\n     */\n    force: boolean;\n}\n\n/**\n * Settings for the show and hide animations\n */\ninterface FadeOptions {\n    /**\n     * Called when the animation ends\n     */\n    onComplete: () => void;\n    /**\n     * Duration (in miliseconds) of the animation\n     */\n    duration: number;\n    /**\n     * The css class to use for the animation\n     */\n    style: string;\n}\n\n/**\n * Settings for the notifications\n */\ninterface ToastrSettings {\n    /**\n     * If set to true, a 'close' button will be shown\n     * @default false\n     */\n    closeButton: boolean;\n    /**\n     * The class to add to the close button\n     * @default 'toast-close-button'\n     */\n    closeClass: string;\n    /**\n     * The amount of time (in miliseconds) the animation should take when the user clicks the close button\n     * @default 0\n     */\n    closeDuration: number;\n    /**\n     * HTML used to create the close button\n     *  @default '&times;'\n     */\n    closeHtml: string;\n    /**\n     * Whether the notification should be closed when the user hovers the notification\n     * @default true\n     */\n    closeOnHover: boolean;\n    /**\n     * DOM id of the container\n     * @default 'toast-container'\n     */\n    containerId: string;\n    /**\n     * Whether or not HTML characters in the title and message should be escaped\n     * @default false\n     */\n    escapeHtml: boolean;\n    /**\n     * The amount of time (in miliseconds) the toast should be displayed after a user hovers it\n     * @default 1000\n     */\n    extendedTimeOut: number;\n    /**\n     * The amount of time the hide animation should take\n     * @default 1000\n     */\n    hideDuration: number;\n    /**\n     * The name of the animate.css animation used for hiding the toast\n     * @default 'fadeOut'\n     */\n    hideMethod: string;\n    /**\n     * The default icon class\n     * @default 'toast-info'\n     */\n    iconClass: string;\n    /**\n     * Can be used to specify the default icon per notification type\n     */\n    iconClasses: ToastrIconClasses;\n    /**\n     * The class added to the message element of the notification\n     * @default 'toast-message'\n     */\n    messageClass: string;\n    /**\n     * If set to false, new notifications will be added at the bottom\n     * @default true\n     */\n    newestOnTop: boolean;\n    /**\n     * Called when the user clicks the notification\n     * @default noop\n     */\n    onClick: () => void;\n    /**\n     * Called when a user clicks the close button\n     * @default noop\n     */\n    onCloseClick: (event: Event) => void;\n    /**\n     * Called after the notification is hidden\n     * @default noop\n     */\n    onHidden: () => void;\n    /**\n     * Called after the notification is shown\n     * @default noop\n     */\n    onShown: () => void;\n    /**\n     * Class used to set the position of the notification\n     * @default 'toast-top-right'\n     */\n    positionClass: string;\n    /**\n     * Prevents the notifications from being shown when the message matches the previous message\n     * @default false\n     */\n    preventDuplicates: boolean;\n    /**\n     * Whether or not a progressbar should be shown\n     * @default false\n     */\n    progressBar: boolean;\n    /**\n     * Css class to set on the progressbar element\n     * @default 'toast-progress'\n     */\n    progressClass: string;\n    /**\n     *  Set to true for right-to-left languages\n     *  @default false\n     */\n    rtl: boolean;\n    /**\n     * The amount of time the hide animation should take\n     * @default 300\n     */\n    showDuration: number;\n    /**\n     * The name of the animate.css animation used for showing the toast\n     * @default 'fadeIn'\n     */\n    showMethod: string;\n    /**\n     * The element the toastr container should be added to\n     * @default: 'body'\n     */\n    target: string;\n    /**\n     * The amount of time (in miliseconds) the notification should be shown\n     * @default 5000\n     */\n    timeOut: number;\n    /**\n     * The CSS class to add to the title element\n     * @default 'toast-title'\n     */\n    titleClass: string;\n    /**\n     * The CSS class to add to the notification element\n     * @default 'toast-title'\n     */\n    toastClass: string;\n    /**\n     * Set to true to hide the notification when a user click on it\n     * @default true\n     */\n    tapToDismiss: boolean;\n}\n\n/**\n * Used to set overriden options for the notifications\n */\ninterface ToastrOptions extends Partial {}\n\n/**\n * Used as argument for toastr show and hide events\n */\ninterface ToastrEvent {\n    /** The time the notification is hidden */\n    endTime: Date;\n    /** The ID of the notification */\n    toastId: number;\n    /** The state of the toastr, visible or hidden */\n    state: 'visible' | 'hidden';\n    /** The time the toastr is created */\n    startTime: Date;\n    /** The settings for the notification */\n    options: ToastrSettings & { [key: string]: any };\n    /** The overriden options for the notification */\n    map: any;\n}\n\n/**\n * Returns true when the given value is null or undefined\n * @param value The value to check if it's null or undefined\n */\nfunction isNotNullOrUndefined(value: T | null | undefined): value is T {\n    return value != null && value !== undefined;\n}\n\n/**\n * Returns whether the given argument is a function or not\n * @param functionToCheck The value to check if it's a function\n */\nfunction isFunction(functionToCheck: unknown): functionToCheck is () => any {\n    return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * An empty function\n */\nfunction noop() {}\n\nconst enum ToastType {\n    error = 'error',\n    info = 'info',\n    success = 'success',\n    warning = 'warning',\n}\n\n/**\n * Toastr notification library\n */\nexport class Toastr {\n    /** Default settings for the notifications */\n    public static options: ToastrOptions = {};\n\n    /** Reference to the container DOM element */\n    private static containerEl: HTMLElement;\n\n    /** The message of the last toast */\n    private static previousToast: string | undefined;\n\n    /** Can be used to listen to events */\n    private static listener: (eventArgs: ToastrEvent) => void;\n\n    /** The toast id (will increment for every new toast) */\n    private static toastId = 0;\n\n    /**\n     * Get default settings from toastrjs\n     */\n    public static getDefaults(): ToastrSettings {\n        return {\n            closeButton: false,\n            closeClass: 'toast-close-button',\n            closeDuration: 0,\n            closeHtml: '&times;',\n            closeOnHover: true,\n            containerId: 'toast-container',\n            escapeHtml: false,\n            extendedTimeOut: 1000,\n            hideDuration: 1000,\n            hideMethod: 'fadeOut',\n            iconClass: 'toast-info',\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning',\n            },\n            messageClass: 'toast-message',\n            newestOnTop: true,\n            onClick: noop,\n            onCloseClick: (event: Event) => {},\n            onHidden: noop,\n            onShown: noop,\n            positionClass: 'toast-top-right',\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false,\n            showDuration: 300,\n            showMethod: 'fadeIn',\n            tapToDismiss: true,\n            target: 'body',\n            timeOut: 5000,\n            titleClass: 'toast-title',\n            toastClass: 'toast',\n        };\n    }\n\n    /**\n     * Clear toastr container\n     */\n    private static clearContainer(options: ToastrSettings) {\n        if (!isNotNullOrUndefined(Toastr.containerEl)) return;\n\n        Array.from(Toastr.containerEl.children).forEach(el => Toastr.clearToast(el as HTMLElement, options));\n    }\n\n    /**\n     * Remove a toast element\n     */\n    private static removeToast(toastElement: HTMLElement) {\n        if (!Toastr.containerEl) {\n            Toastr.containerEl = Toastr.getContainer();\n        }\n\n        Toastr.removeElement(toastElement);\n\n        if (Toastr.containerEl?.children.length === 0) {\n            Toastr.removeElement(Toastr.containerEl);\n            Toastr.previousToast = undefined;\n        }\n    }\n\n    /**\n     * Clear toastr element\n     */\n    private static clearToast(toastElement: HTMLElement | undefined, options: ToastrSettings, clearOptions?: ToastrClearOptions) {\n        const force = clearOptions?.force === true;\n        if (toastElement && (force || toastElement !== toastElement.ownerDocument?.activeElement)) {\n            Toastr.animate(toastElement, {\n                duration: options.hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                },\n            });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Creates the container that contains all toasters\n     */\n    private static createContainer(options: ToastrSettings) {\n        Toastr.containerEl = document.createElement('div');\n        Toastr.containerEl.setAttribute('id', options.containerId);\n        Toastr.containerEl.classList.add(options.positionClass);\n        const targetEl: HTMLElement | null = document.querySelector(options.target);\n\n        if (targetEl != null) {\n            targetEl.appendChild(Toastr.containerEl);\n        } else {\n            console.warn(`Couldn't create toastr container, the 'containerEl' cannot be found.`);\n        }\n    }\n\n    /**\n     * Native remove element helper\n     */\n    private static removeElement(el: HTMLElement) {\n        el?.parentNode?.removeChild(el);\n    }\n\n    /**\n     * Removes the notification element from the dom.\n     * Clears the whole container if the notification couldn't be removed\n     * @param toastElement The notification element to remove\n     * @param clearOptions Clear options\n     */\n    public static clear(toastElement?: HTMLElement, clearOptions?: ToastrClearOptions) {\n        const options = Toastr.getOptions();\n        if (!Toastr.containerEl) {\n            Toastr.getContainer(options, false);\n        }\n        if (!Toastr.clearToast(toastElement, options, clearOptions)) {\n            Toastr.clearContainer(options);\n        }\n    }\n\n    /**\n     * Register a callback function\n     */\n    public static subscribe(callback: (eventArgs: ToastrEvent) => void) {\n        Toastr.listener = callback;\n    }\n\n    /**\n     * Show info message\n     */\n    public static info(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.info,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).info,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show success message\n     */\n    public static success(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.success,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).success,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Show warning message\n     */\n    public static warning(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.warning,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).warning,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Shows an error message\n     */\n    public static error(message?: string, title?: string, optionsOverride?: ToastrOptions & { [key: string]: any }) {\n        return Toastr.notify({\n            type: ToastType.error,\n            iconClass: (Toastr.getOptions().iconClasses as ToastrIconClasses).error,\n            message,\n            optionsOverride,\n            title,\n        });\n    }\n\n    /**\n     * Get container that contains the toastr\n     */\n    public static getContainer(options?: ToastrSettings, create?: boolean) {\n        const settings = options ?? (Toastr.getOptions() as ToastrSettings);\n\n        if (settings.containerId != null) {\n            Toastr.containerEl = document.getElementById(settings.containerId) as HTMLElement;\n        }\n        if (Toastr.containerEl == null && create === true) {\n            Toastr.createContainer(settings);\n        }\n        return Toastr.containerEl;\n    }\n\n    /**\n     * Creates a DOM element from a HTML string\n     * @param htmlString The HTML string to create the DOM element(s) from\n     */\n    private static createElementFromHTML(htmlString: string): HTMLElement {\n        const div = document.createElement('div');\n        div.innerHTML = htmlString.trim();\n        return div.firstChild as HTMLElement;\n    }\n\n    /**\n     * Used to add animation to show and hide the notification\n     * @param toastElement The element to animate\n     * @param options The animation options\n     */\n    private static animate(toastElement: HTMLElement, options: FadeOptions) {\n        toastElement.classList.add('animate__animated', `animate__${options.style}`);\n\n        const onAnimationEnd = (ev: { type: string }) => {\n            if (isFunction(options.onComplete)) {\n                options.onComplete();\n            }\n\n            toastElement.removeEventListener(ev.type, onAnimationEnd);\n        };\n\n        if (!isNaN(options.duration) || 0) {\n            if (options.duration === 0) {\n                onAnimationEnd({ type: 'animationend' });\n            } else {\n                toastElement.style.setProperty('--animate-duration', options.duration / 1000 + 's');\n            }\n        }\n\n        toastElement.addEventListener('animationend', onAnimationEnd);\n    }\n\n    /**\n     * Fires events\n     */\n    private static publish(args: ToastrEvent) {\n        if (Toastr.listener) {\n            Toastr.listener(args);\n        }\n    }\n\n    /**\n     * Creates the notification\n     * @param map The overriden options\n     */\n    private static notify(map: any) {\n        const shouldExit = (_settings: ToastrSettings, _map: any) => {\n            const result = _settings.preventDuplicates === true && _map.message === Toastr.previousToast;\n            Toastr.previousToast = _map.message;\n            return result;\n        };\n\n        let options = Toastr.getOptions();\n        let iconClass = map.iconClass || options.iconClass;\n\n        if (isNotNullOrUndefined(map.optionsOverride)) {\n            options = {\n                ...options,\n                ...map.optionsOverride,\n            };\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) {\n            return;\n        }\n\n        Toastr.toastId++;\n        Toastr.containerEl = Toastr.getContainer(options, true);\n\n        let intervalId: number | undefined;\n        const toastElement = document.createElement('div');\n        const $titleElement = document.createElement('div');\n        const $messageElement = document.createElement('div');\n        const progressElement = document.createElement('div');\n        const closeElement: HTMLElement = Toastr.createElementFromHTML(options.closeHtml);\n\n        const response: ToastrEvent = {\n            toastId: Toastr.toastId,\n            state: 'visible',\n            startTime: new Date(),\n            endTime: new Date(),\n            options,\n            map,\n        };\n\n        const hideToast = (override: boolean) => {\n            const hideDuration = override && options.closeDuration !== 0 ? options.closeDuration : options.hideDuration;\n            if (toastElement === toastElement.ownerDocument?.activeElement && !override) {\n                return;\n            }\n\n            Toastr.animate(toastElement, {\n                duration: hideDuration,\n                style: options.hideMethod,\n                onComplete: () => {\n                    Toastr.removeToast(toastElement);\n                    clearTimeout(intervalId);\n                    if (isFunction(options.onHidden) && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    Toastr.publish(response);\n                },\n            });\n        };\n\n        /**\n         * Display toast message\n         */\n        const displayToast = () => {\n            Toastr.animate(toastElement, {\n                duration: options.showDuration,\n                onComplete: options.onShown,\n                style: options.showMethod,\n            });\n\n            if (options.timeOut) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n            }\n        };\n\n        const handleEvents = () => {\n            if (options.closeOnHover) {\n                toastElement.addEventListener('mouseover', stickAround);\n                toastElement.addEventListener('mouseout', delayedHideToast);\n            }\n\n            if (!options.onClick && options.tapToDismiss) {\n                toastElement.addEventListener('click', () => {\n                    hideToast(false);\n                });\n            }\n\n            if (options.closeButton && closeElement) {\n                toastElement.addEventListener('click', event => {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble === false) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (isFunction(options.onClick)) {\n                toastElement.addEventListener('click', event => {\n                    options.onCloseClick(event);\n                    hideToast(false);\n                });\n            }\n        };\n\n        const escapeHtml = (source: string) => {\n            return (source ?? '').replace(/&/g, '&amp;').replace(/'/g, '&quot;').replace(/'/g, '&#39;').replace(//g, '&gt;');\n        };\n\n        const setAria = () => {\n            const ariaValue = ['toast-success', 'toast-info'].includes(map.iconClass) ? 'polite' : 'assertive';\n            toastElement.setAttribute('aria-live', ariaValue);\n        };\n\n        /**\n         * Set icons on toast\n         */\n        const setIcon = () => {\n            if (map.iconClass) {\n                toastElement.classList.add(options.toastClass, iconClass);\n            }\n        };\n\n        /**\n         * Add toaster to container\n         */\n        const setSequence = () => {\n            Toastr.containerEl.insertBefore(toastElement, options.newestOnTop ? Toastr.containerEl.firstChild : null);\n        };\n\n        /**\n         * Set title of a toast message\n         */\n        const setTitle = () => {\n            if (map.title) {\n                let suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.innerHTML += suffix;\n                $titleElement.classList.add(options.titleClass);\n                toastElement.appendChild($titleElement);\n            }\n        };\n\n        /**\n         * Set message of a toast message\n         */\n        const setMessage = () => {\n            if (map.message) {\n                let suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.innerHTML += suffix;\n                $messageElement.classList.add(options.messageClass);\n                toastElement.appendChild($messageElement);\n            }\n        };\n\n        /**\n         * Set closebutton\n         */\n        const setCloseButton = () => {\n            if (options.closeButton) {\n                closeElement.classList.add(options.closeClass);\n                closeElement.setAttribute('role', 'button');\n                toastElement.insertBefore(closeElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set progressbar\n         */\n        const setProgressBar = () => {\n            if (options.progressBar) {\n                progressElement.classList.add(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.timeOut / 1000 + 's');\n                toastElement.insertBefore(progressElement, toastElement.firstChild);\n            }\n        };\n\n        /**\n         * Set RTL\n         */\n        const setRTL = () => {\n            if (options.rtl) {\n                toastElement.classList.add('rtl');\n            }\n        };\n\n        const delayedHideToast = () => {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                progressElement.classList.remove(options.progressClass);\n                progressElement.style.setProperty('--animate-duration', options.extendedTimeOut / 1000 + 's');\n                progressElement.style.width = '100%';\n                // trigger reflow\n                // tslint:disable-next-line\n                void progressElement.offsetWidth;\n                progressElement.classList.add(options.progressClass);\n            }\n        };\n\n        const stickAround = () => {\n            clearTimeout(intervalId);\n        };\n\n        setIcon();\n        setTitle();\n        setMessage();\n        setCloseButton();\n        setProgressBar();\n        setRTL();\n        setSequence();\n        setAria();\n\n        displayToast();\n        handleEvents();\n\n        Toastr.publish(response);\n\n        return toastElement;\n    }\n\n    /**\n     * Get toaster options\n     */\n    private static getOptions(): ToastrSettings {\n        return {\n            ...Toastr.getDefaults(),\n            ...Toastr.options,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/toastr.ts\n            \n            class\n            Toastr\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            interface\n            FadeOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            interface\n            ToastrClearOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            interface\n            ToastrEvent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            interface\n            ToastrIconClasses\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            interface\n            ToastrOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            interface\n            ToastrSettings\n            \n                100 %\n                (31/31)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            function\n            isFunction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            function\n            isNotNullOrUndefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/toastr.ts\n            \n            function\n            noop\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            animate.css : ^4.1.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ToastType   (src/.../toastr.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/toastr.ts\n    \n        \n            \n                \n                    \n                        \n                        ToastType\n                    \n                \n                        \n                            \n                                 error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 info\n                            \n                        \n                        \n                            \n                                Value : info\n                            \n                        \n                        \n                            \n                                 success\n                            \n                        \n                        \n                            \n                                Value : success\n                            \n                        \n                        \n                            \n                                 warning\n                            \n                        \n                        \n                            \n                                Value : warning\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isFunction   (src/.../toastr.ts)\n                        \n                        \n                            isNotNullOrUndefined   (src/.../toastr.ts)\n                        \n                        \n                            noop   (src/.../toastr.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/toastr.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isFunction\n                        \n                        \n                    \n                \n            \n            \n                \nisFunction(functionToCheck)\n                \n            \n\n\n\n\n            \n                \n                    Returns whether the given argument is a function or not\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    functionToCheck\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check if it's a function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isNotNullOrUndefined\n                        \n                        \n                    \n                \n            \n            \n                \nisNotNullOrUndefined(value)\n                \n            \n\n\n\n\n            \n                \n                    Returns true when the given value is null or undefined\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check if it's null or undefined\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            noop\n                        \n                        \n                    \n                \n            \n            \n                \nnoop()\n                \n            \n\n\n\n\n            \n                \n                    An empty function\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\ntoastr2\ntoastr2 is a Javascript library for non-blocking notifications, in this version jQuery is no longer required. The goal is to create a simple core library that can be customized and extended.\nInstall\nNuGet Gallery\nInstall-Package toastrBower\nbower install toastrnpm\nnpm install --save toastryarn\nyarn add toastrBuilding Toastr\nTo build the minified and css versions of Toastr you will need node installed.\nnpm install -g gulp karma-cli\nnpm installAt this point the dependencies have been installed and you can build Toastr\n\nRun the analytics gulp analyze\nRun the test gulp test\nRun the build gulp\n\nContributing\nFor a pull request to be considered it must resolve a bug, or add a feature which is beneficial to a large audience.\nPull requests must pass existing unit tests, CI processes, and add additional tests to indicate successful operation of a new feature, or the resolution of an identified bug.\nRequests must be made against the develop branch. Pull requests submitted against the master branch will not be considered.\nAll pull requests are subject to approval by the repository owners, who have sole discretion over acceptance or denial.\nAuthors\nStefan Koenen\nCredits\nInspired by https://github.com/Srirangan/notifer.js/.\nSpecial thanks to the jQuery version https://github.com/CodeSeven/toastr.\nCopyright\nCopyright © 2020-2021\nLicense\ntoastr is under MIT license - http://www.opensource.org/licenses/mit-license.php\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2020 Stefan\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
